<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="test" default="test">

    <target name="test" depends="init,init-repository,init-workingcopy">
        <if test="${property::exists('target')}">
            <call target="create-workingcopy" if="$({property::exists('target')==false) or ({property::exists('target')==true and string::contains('bugtraq'))}"/>
        </if>
        <ifnot test="${property::exists('target')}">
            <!-- Test bdb repository -->
            <write>Testing bdb repository and working copy...</write>
            <property name="repos"   value="${test-repo-bdb}"/>
            <property name="fs-type" value="bdb"/>
            <property name="wc"      value="${test-wc-bdb}"/>
            <call target="test-all"/>
            <!-- Test fsfs repository -->
            <write>Testing fsfs repository and working copy...</write>
            <property name="repos"   value="${test-repo-fsfs}"/>
            <property name="fs-type" value="fsfs"/>
            <property name="wc"      value="${test-wc-fsfs}"/>
            <call target="test-all"/>
        </ifnot>
        <delete dir="${test-root}" if="${directory::exists(test-root)}" unless="${keep-test=='true'}"/>
        <write>Test complete</write>
    </target>

    <target name="init">
        <tstamp property="test-date" pattern="yyyyMMdd-HHmmss"/>
        <property name="keep-test" value="false" unless="${property::exists('keep-test') and string::to-lower(keep-test)=='true'}"/>
        <property name="test-root" value="${path::combine(path::combine(path::get-temp-path(),'subnant-test'),test-date)}"/>
        <mkdir dir="${test-root}" unless="${directory::exists(test-root)}"/>
    </target>

    <target name="init-repository">
        <property name="svn-root"       value="${test-root}"/>
        <property name="test-repo-bdb"  value="repo-bdb"/>
        <property name="test-repo-fsfs" value="repo-fsfs"/>
        <property name="test-dumps"     value="${path::combine(test-root,'repo-dumps')}"/>
        <mkdir dir="${test-dumps}" unless="${directory::exists(test-dumps)}"/>
        <property name="dump-root" value="${test-dumps}"/>
    </target>

    <target name="init-workingcopy">
        <property name="test-wc-bdb"  value="${path::combine(test-root,'wc-bdb')}"/>
        <property name="test-wc-fsfs" value="${path::combine(test-root,'wc-fsfs')}"/>
        <property name="test-message" value="${'Log message for test '+test-date}"/>
    </target>

    <target name="help">
        <write>
            <![CDATA[Call Subnant targets in a test environment

If no target is set, all main targets are tested

Options:
target          comma separated list of test targets
keep-test       set true to keep data created by test

Examples:
subnant test
subnant test -D:target=create,verify,dump
subnant test -D:keep-test=true
            ]]>
        </write>
    </target>

    <target name="test-all">
        <nant buildfile="create.build"  target="create"/>
        <call target="create-workingcopy"/>
        <nant buildfile="bugtraq.build" target="bugtraq"/>
        <call target="commit-workingcopy"/>
        <call target="search-log"/>
        <nant buildfile="verify.build"  target="verify"/>
        <nant buildfile="dump.build"    target="dump"/>
    </target>

    <target name="create-workingcopy">
        <delete dir="${wc}" if="${directory::exists(wc)}"/>
        <mkdir dir="${wc}" if="${directory::exists(test-root)}"/>
        <property name="uri" value='${path::to-uri(path::combine(svn-root,repos))}'/>
        <exec program="${svn}" workingdir="${wc}" failonerror="true" output="${output-file}" append="true">
            <arg value="checkout"/>
            <arg value="${uri}"/>
            <arg value="."/>
        </exec>
        <write>Checked out repository ${repos} into ${wc}</write>
    </target>

    <target name="commit-workingcopy">
        <exec program="${svn}" workingdir="${wc}" failonerror="true" output="${output-file}" append="true">
            <arg value="commit"/>
            <arg value="-m '${test-message}'"/>
        </exec>
        <write>Committed ${repos} with ${test-message}</write>
    </target>

    <target name="search-log">
        <exec program="${svnlook}" failonerror="true" output="${output-file}" append="true">
            <arg value="log"/>
            <arg value="${path::combine(test-root,repos)}"/>
        </exec>
        <loadfile file="${output-file}" property="test-output"/>
        <if test="${string::contains(test-output,test-message)}">
            <write>${test-message} found in repository log</write>
        </if>
        <ifnot test="${string::contains(test-output,test-message)}">
            <fail>${test-message} not found in repository log</fail>
        </ifnot>
    </target>

</project>