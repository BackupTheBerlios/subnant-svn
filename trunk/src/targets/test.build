<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="test" default="test">

    <target name="test" depends="init,init-repository,init-workingcopy">
        <if test="${no-bdb!='true'}">
            <property name="test-fs" value="bdb"/>
            <call target="do-test"/>
        </if>
        <if test="${no-fsfs!='true'}">
            <property name="test-fs" value="fsfs"/>
            <call target="do-test"/>
        </if>
        <delete dir="${test-root}" if="${directory::exists(test-root)}" unless="${keep-test=='true'}"/>
        <echo level="Warning" message="Test complete"/>
        <echo message="${string::pad-right('Test complete',60,' ')}(${subnant::get-elapsed-time(test-started)})" file="${subnant-output}" append="true"/>
    </target>

    <target name="do-test">
        <echo level="Warning" message="Testing ${test-fs} repository and working copy..."/>
        <echo file="${subnant-output}" message="Testing ${test-fs} repository and working copy..." append="true"/>
        <property name="repos"   value="${'test-repo-'+test-fs}"/>
        <property name="fs-type" value="${test-fs}"/>
        <property name="wc"      value="${path::combine(test-root,'wc-'+test-fs)}"/>
        <if test="${property::exists('target')}">
            <foreach item="String" delim="," in="${target}" property="test-target">
                <nant buildfile="client/${test-target}.build" if="${test-target=='bugtraq'}" target="test"/>
                <nant buildfile="server/${test-target}.build" if="${test-target!='bugtraq'}" target="test"/>
            </foreach>
        </if>
        <ifnot test="${property::exists('target')}">
            <call target="test-all"/>
        </ifnot>
    </target>

    <target name="test-all">
        <!-- ::TODO:: Create test target in each main target, so that all this test target has to do
             is setup the test framework (temp directories, etc)...the other targets test themselves -->
    	<nant buildfile="server/create.build"  target="create"/>
        <call target="create-workingcopy"/>
        <nant buildfile="client/bugtraq.build" target="bugtraq"/>
        <call target="commit-workingcopy"/>
        <call target="search-log"/>
        <nant buildfile="server/verify.build"  target="verify"/>
        <nant buildfile="server/hotcopy.build" target="hotcopy"/>
        <nant buildfile="server/dump.build"    target="dump"/>
        <!--<nant buildfile="migrate.build" target="test"/> migrate tests nearly everything! -->
    </target>

    <target name="create-workingcopy">
        <delete dir="${wc}" if="${directory::exists(wc)}"/>
        <mkdir dir="${wc}" if="${directory::exists(test-root)}"/>
        <property name="uri" value='${subnant::to-uri(path::combine(svn-root,repos))}'/>
        <exec program="${svn}" workingdir="${wc}" failonerror="${failonerror}" resultproperty="svn-result">
            <arg value="checkout"/>
            <arg value="${uri}"/>
            <arg value="."/>
        </exec>
        <echo level="Warning" message="Checked out repository ${path::get-file-name(repos)} into ${wc}"/>
    </target>

    <target name="commit-workingcopy">
        <echo level="Warning" message="Committing...takes a while if email hooks enabled"/>
        <exec program="${svn}" workingdir="${wc}" failonerror="${failonerror}" resultproperty="svn-result">
            <arg value="commit"/>
            <arg value="-m '${test-message}'"/>
        </exec>
        <echo level="Warning" if="${svn-result=='0'}" message="Committed ${path::get-file-name(wc)} to ${path::get-file-name(repos)} with log ${test-message}"/>
        <echo level="Warning" if="${svn-result!='0'}" message="**** ERROR committing ${path::get-file-name(wc)} to ${path::get-file-name(repos)} ***"/>
    </target>

    <target name="search-log">
        <exec program="${svnlook}" output="${exec-output}" append="false" failonerror="${failonerror}" resultproperty="svnlook-result">
            <arg value="log"/>
            <arg value="${path::combine(test-root,repos)}"/>
        </exec>
        <loadfile file="${exec-output}" property="test-output"/>
        <if test="${string::contains(test-output,test-message)}">
            <echo level="Warning" message="Found log ${test-message} in repository"/>
        </if>
        <ifnot test="${string::contains(test-output,test-message)}">
            <fail message="Did not find log ${test-message} in repository"/>
        </ifnot>
    </target>

    <target name="init">
        <property name="test-started" value="${datetime::get-ticks(datetime::now())}"/>
        <tstamp property="test-date" pattern="yyyyMMdd-HHmmss-ffff"/>
        <property name="keep-test" value="false" unless="${property::exists('keep-test') and string::to-lower(keep-test)=='true'}"/>
        <property name="no-bdb"    value="false" unless="${property::exists('no-bdb') and string::to-lower(no-bdb)=='true'}"/>
        <property name="no-fsfs"   value="false" unless="${property::exists('no-fsfs') and string::to-lower(no-fsfs)=='true'}"/>
        <property name="test-root" value="${path::combine(path::combine(path::get-temp-path(),'subnant-test'),test-date)}"
             unless="${property::exists('test-root')}"/>
        <mkdir dir="${test-root}" unless="${directory::exists(test-root)}"/>
    </target>

    <target name="init-repository">
        <property name="svn-root"   value="${test-root}"/>
        <property name="test-dumps" value="${path::combine(test-root,'repo-dumps')}"/>
        <mkdir dir="${test-dumps}" unless="${directory::exists(test-dumps)}"/>
        <property name="dump-root" value="${test-dumps}"/>
    </target>

    <target name="init-workingcopy">
        <property name="test-message" value="${'message for test '+test-date}"/>
    </target>

    <target name="help">
        <echo level="Warning">
            <![CDATA[test: usage: subnant test [-D:<option>=<value>]

Call Subnant targets in a test environment

Options:
target          comma separated list of test targets *
test-root       override (temporary) test root directory
keep-test       set true to keep data created by test
no-bdb          set true to not test bdb repository
no-fsfs         set true to not test fsfs repository
sendmail        set true to email result

* If no target set, all main targets are tested

Examples:
subnant test
subnant test -D:target=create,verify,dump
subnant test -D:keep-test=true -D:no-bdb=true
            ]]>
        </echo>
    </target>
   
</project>