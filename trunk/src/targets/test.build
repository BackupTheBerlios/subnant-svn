<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="test" default="test">

    <target name="test" depends="init">
        <if test="${no-fsfs!='true'}">
            <property name="test-fs" value="fsfs"/>
            <call target="test-repo"/>
        </if>
        <if test="${no-bdb!='true'}">
            <property name="test-fs" value="bdb"/>
            <call target="test-repo"/>
        </if>
        <delete dir="${test-root}" if="${directory::exists(test-root)}" unless="${keep-test=='true'}"/>
        <echo message="Test complete" level="Warning"/>
        <echo message="${string::pad-right('Test complete',60,' ')}(${subnant::get-elapsed-time(test-started)})" file="${subnant-output}" append="true"/>
    </target>

    <target name="init">
        <property name="test-started" value="${datetime::get-ticks(datetime::now())}"/>
        <property name="keep-test" value="false" unless="${property::exists('keep-test') and string::to-lower(keep-test)=='true'}"/>
        <property name="no-bdb"    value="false" unless="${property::exists('no-bdb') and string::to-lower(no-bdb)=='true'}"/>
        <property name="no-fsfs"   value="false" unless="${property::exists('no-fsfs') and string::to-lower(no-fsfs)=='true'}"/>
        <property name="test-root" value="${path::combine(path::combine(path::get-temp-path(),'subnant-test'),tstamp)}" unless="${property::exists('test-root')}"/>
        <mkdir dir="${test-root}" unless="${directory::exists(test-root)}"/>
    </target>

    <target name="init-client">
        <property name="test-message" value="${'message for test '+tstamp}"/>
    </target>

    <target name="init-server">
        <property name="svn-root"     value="${test-root}"/>
        <property name="test-dump"    value="${path::combine(test-root,'dumps')}"/>
        <property name="test-hotcopy" value="${path::combine(test-root,'hotcopy')}"/>
        <property name="dump-root"    value="${test-dump}"/>
        <property name="hotcopy-root" value="${test-hotcopy}"/>
        <property name="hook-ext"     value=".bat" if="${platform::is-win32()}"/>
        <property name="hook-ext"     value=".sh"  if="${platform::is-unix()}"/>
        <mkdir dir="${test-dump}"    unless="${directory::exists(test-dump)}"/>
        <mkdir dir="${test-hotcopy}" unless="${directory::exists(test-hotcopy)}"/>
    </target>

    <target name="test-repo" depends="init-client,init-server">
        <echo message="[Testing ${test-fs} repository]" level="Warning"/>
        <echo message="[Testing ${test-fs} repository]" file="${subnant-output}" append="true"/>
        <property name="repos"      value="${'test-repo-'+test-fs}"/>
        <property name="fs-type"    value="${test-fs}"/>
        <property name="test-repos" value="${path::combine(test-root,repos)}"/>
        <property name="wc"         value="${path::combine(test-root,'wc-'+test-fs)}"/>
        <if test="${property::exists('target')}">
            <foreach item="String" delim="," in="${target}" property="test-target">
                <property name="test-target" value="${string::to-lower(string::trim(test-target))}"/>
                <regex pattern="(?'valid'.*(bugtraq|commit-(access|allower|email|message)|config|create|dump|hotcopy|install|load|migrate|propchange-(access|email)|verify))" input="${test-target}"/>
                <call target="run-test"/>
            </foreach>
        </if>
        <ifnot test="${property::exists('target')}">
            <!-- Core targets -->
            <property name="test-target" value="config"/>
            <call target="run-test"/>
            <property name="test-target" value="install"/>
            <call target="run-test"/>
            <!-- Client targets -->
            <property name="test-target" value="bugtraq"/>
            <call target="run-test"/>
            <!-- Server targets -->
            <property name="test-target" value="create"/>
            <call target="run-test"/>
            <property name="test-target" value="dump"/>
            <call target="run-test"/>
            <property name="test-target" value="hotcopy"/>
            <call target="run-test"/>
            <property name="test-target" value="load"/>
            <call target="run-test"/>
            <property name="test-target" value="migrate"/>
            <call target="run-test"/>
            <property name="test-target" value="verify"/>
            <call target="run-test"/>
            <!-- Hook targets -->
            <property name="test-target" value="commit-access"/>
            <call target="run-test"/>
            <property name="test-target" value="commit-allower"/>
            <call target="run-test"/>
            <property name="test-target" value="commit-email"/>
            <call target="run-test"/>
            <property name="test-target" value="commit-message"/>
            <call target="run-test"/>
            <property name="test-target" value="propchange-access"/>
            <call target="run-test"/>
            <property name="test-target" value="propchange-email"/>
            <call target="run-test"/>
        </ifnot>
        <echo message="" level="Warning"/>
        <echo message="" file="${subnant-output}" append="true"/>
    </target>

    <target name="run-test">
        <echo message="[Testing ${test-target}]" level="Warning"/>
        <echo message="[Testing ${test-target}]" file="${subnant-output}" append="true"/>
        <property name="build-path" value=""/>
        <!-- Core targets: config,install -->
        <if test="${test-target=='config' or test-target=='install'}">
            <property name="build-path" value="../tests"/>
        </if>
        <!-- Client targets: bugtraq -->
        <if test="${test-target=='bugtraq'}">
            <property name="build-path" value="../tests/client"/>
        </if>
        <!-- Server targets: create,dump,hotcopy,load,migrate,verify -->
        <if test="${test-target=='create' or test-target=='dump' or test-target=='hotcopy' or test-target=='load' or test-target=='migrate' or test-target=='verify'}">
            <property name="build-path" value="../tests/server"/>
        </if>
        <!-- Hook targets: commit-access,commit-allower,commit-email,commit-message,propchange-access,propchange-email -->
        <if test="${test-target=='commit-access' or test-target=='commit-allower' or test-target=='commit-email' or test-target=='commit-message' or test-target=='propchange-access' or test-target=='propchange-email'}">
            <property name="build-path" value="../tests/server/hooks"/>
        </if>
        <fail if="${build-path==''}" message="Unknown test target: ${test-target}"/>   
        <nant buildfile="${build-path}/${test-target}.build" target="test-${test-target}"/>
        <echo message="" level="Warning"/>
        <echo message="" file="${subnant-output}" append="true"/>
    </target>

    <target name="create-workingcopy">
        <!--<delete dir="${wc}" if="${directory::exists(wc)}"/>-->
        <mkdir dir="${wc}" if="${directory::exists(test-root)}" unless="${directory::exists(wc)}"/>
        <property name="uri" value='${subnant::to-uri(path::combine(svn-root,repos))}'/>
        <exec program="${svn}" workingdir="${wc}" failonerror="${failonerror}" resultproperty="svn-result">
            <arg value="checkout"/>
            <arg value="${uri}"/>
            <arg value="."/>
        </exec>
        <echo message="Checked out ${path::get-file-name(repos)}" level="Warning"/>
    </target>

    <target name="create-hook">
        <property name="hook-script" value="${path::combine(test-root,repos+'/hooks/'+hook+hook-ext)}"/>
        <copy file="../../hooks/${hook}${hook-ext}.example" tofile="${hook-script}" unless="${file::exists(hook-script)}"/>
        <echo message="Created ${path::get-file-name(hook-script)} hook" level="Warning"/>
    </target>

    <target name="propset">
        <exec program="${svn}" failonerror="${failonerror}" resultproperty="exec-result">
            <arg value="propset"/>
            <arg value="${propname}"/>
            <arg value="${propval}"/>
            <arg value="${wc}"/>
        </exec>
        <if test="${exec-result=='0'}">
            <echo message="Set ${propname} property in ${wc}" level="Warning"/>
        </if>
        <if test="${exec-result!='0'}">
            <echo message="*** ERROR setting property ${propname} to ${propval}" file="${subnant-output}" append="true"/>
            <echo message="*** ERROR setting property ${propname} to ${propval}" level="Warning"/>
        </if>
    </target>

    <target name="commit-workingcopy">
        <echo message='Committing with log "${test-message}"' level="Warning"/>
        <exec program="${svn}" workingdir="${wc}" failonerror="${failonerror}" resultproperty="svn-result">
            <arg line='commit --message "${test-message}"'/>
        </exec>
        <if test="${svn-result=='0' and commit-should-pass=='true'}">
            <echo message="Committed ${path::get-file-name(wc)} to ${path::get-file-name(repos)}" level="Warning"/>
        </if>
        <if test="${svn-result!='0' and commit-should-pass=='false'}">
            <echo message="Committing ${path::get-file-name(wc)} to ${path::get-file-name(repos)} failed as expected" level="Warning"/>
        </if>
        <if test="${svn-result=='0' and commit-should-pass=='false'}">
            <fail message="*** ERROR Committed ${path::get-file-name(wc)} to ${path::get-file-name(repos)} when it should have failed ***"/>
        </if>
        <if test="${svn-result!='0' and commit-should-pass=='true'}">
            <fail message="*** ERROR committing ${path::get-file-name(wc)} to ${path::get-file-name(repos)} ***"/>
        </if>
    </target>

    <target name="search-log">
        <exec program="${svnlook}" output="${exec-output}" append="false" failonerror="${failonerror}" resultproperty="svnlook-result">
            <arg value="log"/>
            <arg value="${path::combine(test-root,repos)}"/>
        </exec>
        <loadfile file="${exec-output}" property="test-output"/>
        <if test="${string::contains(test-output,test-message)}">
            <echo message="Found log ${test-message} in repository" level="Warning"/>
        </if>
        <ifnot test="${string::contains(test-output,test-message)}">
            <fail message="Did not find log ${test-message} in repository"/>
        </ifnot>
    </target>

    <target name="help">
        <echo level="Warning">
            <![CDATA[test: usage: subnant test [-D:<option>=<value>]

Call Subnant targets in a test environment

Options:
target          comma separated list of test targets *
test-root       override (temporary) test root directory
keep-test       set true to keep data created by test
no-bdb          set true to not test bdb repository
no-fsfs         set true to not test fsfs repository
sendmail        set true to email result

* If no target set, all main targets are tested

Examples:
subnant test
subnant test -D:target=create,verify,dump
subnant test -D:keep-test=true -D:no-bdb=true
]]>
        </echo>
    </target>
   
</project>