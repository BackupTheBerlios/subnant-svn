<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="backup" default="backup">

    <target name="backup" depends="init">
        <foreach item="String" delim="," in="${repos}" property="repo">
            <call target="hotcopy-method"   if="${backup-method=='hotcopy'}"/>
            <call target="dump-method"      if="${backup-method=='dump'}"/>
            <call target="increment-method" if="${backup-method=='increment'}"/>
        </foreach>
        <echo unless="${backup-ok=='true'}" file="${subnant-output}" append="true"
            message="${string::pad-right('Backup complete',60,' ')}(${subnant::get-elapsed-time(backup-started)})"/>
        <fail if="${backup-ok=='false'}"
            message="${string::pad-right('Backup completed with errors!',60,' ')}(${subnant::get-elapsed-time(backup-started)})"/>
    </target>

    <target name="init">
        <tstamp property="hotcopy-date" pattern="yyyyMMdd-HHmmss-ffff"/>
        <property name="backup-started" value="${datetime::get-ticks(datetime::now())}"/>
        <property name="failonerror"    value="false"/>
        <property name="backup-ok"      value="true"/>
        <xmlpeek file="${config}" xpath="/configuration/svn-repos/hotcopy-root"
            property="hotcopy-root" unless="${property::exists('hotcopy-root')}"/>
        <xmlpeek file="${config}" xpath="/configuration/backup/method"
            property="method" unless="${property::exists('method')}"/>
        <xmlpeek file="${config}" xpath="/configuration/backup/verify-hotcopy"
            property="verify-hotcopy" unless="${property::exists('verify-hotcopy')}"/>
        <xmlpeek file="${config}" xpath="/configuration/backup/compress-dump"
            property="compress-dump" unless="${property::exists('compress-dump')}"/>
        <fail unless="${directory::exists(hotcopy-root)}"
            message="hotcopy-root is invalid or does not exist in filesystem: ${hotcopy-root}"/>
        <property name="backup-method" value="${string::trim(string::to-lower(method))}"/>
        <fail unless="${backup-method=='hotcopy' or backup-method=='dump' or backup-method=='increment'}"
            message="Backup method must be hotcopy or dump or increment"/>
        <property name="verify-backup" value="${string::trim(string::to-lower(verify-hotcopy))}"/>
        <fail if="${verify-backup!='false' and verify-backup!='true'}"
            message="verify-hotcopy must be set true or false"/>
        <property name="compress-backup" value="${string::trim(string::to-lower(compress-dump))}"/>
        <fail if="${compress-backup!='false' and int::parse(compress-backup)&lt;1 and int::parse(compress-backup)&gt;9}"
            message="compress must be set false or at compression level 1 (lowest) through to 9 (highest)"/>
    </target>

    <target name="init-increment">
        <echo level="Warning" message="::TODO:: Get highest and youngest"/>
        <property name="dump-highest"  value="0"/>
        <property name="dump-youngest" value="0"/>
    </target>

    <target name="hotcopy-method">
        <property name="hotcopy-started" value="${datetime::get-ticks(datetime::now())}"/>
        <echo level="Warning" message="Hotcopying repository ${repo}"/>
        <delete dir="${path::combine(hotcopy-root,repo)}" if="${directory::exists(path::combine(hotcopy-root,repo))}"/>
        <property name="hotcopy-ok" value="false"/>
        <exec program="${svnadmin}" failonerror="${failonerror}" resultproperty="hotcopy-result">
            <arg value="hotcopy"/>
            <arg value="${path::combine(svn-root,repo)}"/>
            <arg value="${path::combine(hotcopy-root,repo)}"/>
            <arg value="--clean-logs"/>
        </exec>
        <property name="hotcopy-ok" value="true" if="${hotcopy-result=='0'}"/>
        <echo if="${hotcopy-ok=='true'}" file="${subnant-output}" append="true"
            message="${string::pad-right('Hotcopied repository '+repo,60,' ')}(${subnant::get-elapsed-time(hotcopy-started)})"/>
        <echo if="${hotcopy-ok=='false'}" file="${subnant-output}" append="true"
            message="${string::pad-right('*** ERROR hotcopying repository '+repo+' ***',60,' ')}"/>
        <property name="backup-ok" if="${hotcopy-ok=='false'}" value="false"/>
        <if test="${hotcopy-ok=='true'}">
            <nant buildfile="verify.build" target="verify">
                <properties>
                    <property name="verify-repos"    value="${repo}"/>
                    <property name="verify-svn-root" value="${hotcopy-root}"/>
                </properties>
            </nant>
            <loadfile file="${exec-result}" property="verify-result"/>
            <property name="verify-result" value="${string::trim(verify-result)}"/>
            <property name="backup-ok" value="false" if="${verify-result!='0'}"/>
            <call target="cycle-hotcopy"/>
        </if>
    </target>

    <target name="cycle-hotcopy">
        <echo level="Warning" message="::TODO:: Cycle hotcopy"/>
    </target>

    <target name="dump-method">
        <property name="dump-started" value="${datetime::get-ticks(datetime::now())}"/>
        <nant buildfile="dump.build" target="dump">
            <properties>
                <property name="dump-repos"    value="${repo}"/>
                <property name="dump-svn-root" value="${svn-root}"/>
            </properties>
        </nant>
        <loadfile file="${exec-result}" property="dump-result"/>
        <property name="dump-result" value="${string::trim(dump-result)}"/>
        <property name="backup-ok" value="false" if="${dump-result!='0'}"/>
        <call target="cycle-dump"/>
    </target>
   
    <target name="cycle-dump">
        <echo level="Warning" message="::TODO:: Cycle dump"/>
    </target>

    <target name="increment-method" depends="init-increment">
        <property name="increment-started" value="${datetime::get-ticks(datetime::now())}"/>
        <nant buildfile="dump.build" target="dump">
            <properties>
                <property name="dump-repos"    value="${repo}"/>
                <property name="dump-svn-root" value="${svn-root}"/>
                <property name="dump-rev"      value="${dump-highest}:${dump-youngest}"/>
            </properties>
        </nant>
        <loadfile file="${exec-result}" property="dump-result"/>
        <property name="dump-result" value="${string::trim(dump-result)}"/>
        <property name="backup-ok" value="false" if="${dump-result!='0'}"/>
    </target>

    <target name="help">
        <echo level="Warning">
            <![CDATA[backup: usage: subnant backup [-D:<option>=<value>]

Backup repositories using a variety of methods

Methods:
hotcopy         verbatim copy of repository
dump            dump all revisions into portable format
increment       dump all younger revisions starting from highest revision
                found in dump-root for repository (ie. only new revisions)

Options:
repos           comma separated list of repositories to backup *
method          set backup method hotcopy or dump or increment **
verify-hotcopy  verify repository hotcopy **
compress-dump   compress dump at compression level 1 (lowest) to 9 (highest) **
svn-root        repository root directory **
hotcopy-root    repository hotcopy root directory **
dump-root       repository dump root directory **
svn-bindir      Subversion binary directory **
incremental     set true for svnadmin --incremental switch ***
deltas          set true for svnamdin --deltas switch ***
sendmail        set true to email result

*   If repos not set, all repositories under svn-root are backed up
**  If option not set, default value in subnant.config is used
*** Option only used when backup method is dump or incremental 

   
Examples:
subnant backup
subnant backup -D:repos=repo1,repo2
subnant backup -D:method=dump -D:dump-root=/svnroot/dumps -D:sendmail=true
            ]]>
        </echo>
    </target>
   
</project>
