<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html <http://www.gnu.org/copyleft/gpl.html> 

$Id$ 
-->
<project name="create" default="create">

    <target name="create" depends="init">
        <foreach item="String" delim="," in="${repos}" property="repo">
            <call target="svnadmin-create"/>
        </foreach>
        <if test="${create-ok!='true'}">
            <fail message="${string::pad-right('Create completed with errors!',60,' ')}(${subnant::get-elapsed-time(create-started)})"/>
        </if>
    </target>

    <target name="init">
        <property name="create-started" value="${datetime::get-ticks(datetime::now())}"/>
        <property name="create-ok"      value="true"/>
        <!-- Assign config values to properties so long as they haven't been passed as a command-line parameter -->
        <xmlpeek file="${config}" xpath="/configuration/svn-repos/fs-type"    property="fs-type"    unless="${property::exists('fs-type')}"/>
        <xmlpeek file="${config}" xpath="/configuration/svn-repos/config-dir" property="config-dir" unless="${property::exists('config-dir')}"/>
        <!-- Ready properties -->
        <property name="create-fs-type"    value="${string::trim(string::to-lower(fs-type))}"/>
        <property name="create-config-dir" value="${string::trim(config-dir)}"/>
        <property name="create-svn-root"   value="${svn-root}" unless="${property::exists('create-svn-root')}"/>
        <!-- Verify properties -->
        <fail unless="${property::exists('repos')}" message="Can't create repository as repos property not defined"/>
        <fail if="${create-fs-type!='bdb' and create-fs-type!='fsfs'}" message="fs-type must be bdb or fsfs"/>
        <fail if="${string::get-length(create-config-dir)>=0 and directory::exists(create-config-dir)==false}" message="config-dir ${create-config-dir} doesn't exist"/>
        <!-- Assign, ready and verify bdb properties if needed -->
        <if test="${create-fs-type=='bdb'}">
            <property name="log-keep"   value="false"/>
            <property name="txn-nosync" value="false"/>
            <property name="log-keep"   value="${string::trim(string::to-lower(bdb-log-keep))}"   if="${property::exists('bdb-log-keep')}"/>
            <property name="txn-nosync" value="${string::trim(string::to-lower(bdb-txn-nosync))}" if="${property::exists('bdb-txn-nosync')}"/>
            <fail if="${log-keep!='true'   and log-keep!='false'}"   message="bdb-log-keep ${log-keep} must be true or false"/>
            <fail if="${txn-nosync!='true' and txn-nosync!='false'}" message="bdb-txn-nosync ${txn-nosync} must be true or false"/>
        </if>
        <!-- Define file extension based upon operating sytem -->
        <property name="file-ext" value=".bat" if="${platform::is-win32()}"/>
        <property name="file-ext" value=".sh"  if="${platform::is-unix()}"/>
        <fail unless="${property::exists('file-ext')}" message="Unknown operating sytem (only Linux and Windows supported)"/>
    </target>

    <target name="svnadmin-create">
        <property name="started" value="${datetime::get-ticks(datetime::now())}"/>
        <property name="repo"    value="${string::trim(repo)}"/>
        <echo level="Warning" message="Creating ${create-fs-type} repository ${repo} in ${create-svn-root}"/>
        <exec program="${svnadmin}" failonerror="${failonerror}" resultproperty="create-result">
            <arg value="create"/>
            <arg value="--bdb-txn-nosync"     if="${create-fs-type=='bdb' and txn-nosync=='true'}"/>
            <arg value="--bdb-log-keep"       if="${create-fs-type=='bdb' and log-keep=='true'}"/>
            <arg value="--config-dir"         if="${string::get-length(create-config-dir)>0}"/>
            <arg value="${create-config-dir}" if="${string::get-length(create-config-dir)>0}"/>
            <arg value="--fs-type"/>
            <arg value="${create-fs-type}"/>
            <arg value="${path::combine(create-svn-root,repo)}"/>
        </exec>
        <if test="${create-result=='0'}">
            <echo message="${string::pad-right('Created '+create-fs-type+' repository '+repo+' in '+create-svn-root,60,' ')}(${subnant::get-elapsed-time(started)})" file="${subnant-output}" append="true"/>
            <call target="copy-repos-conf"  unless="${property::exists('no-svnserve') and string::to-lower(no-svnserve)=='true'}"/>
            <call target="copy-repos-hooks" unless="${property::exists('no-hooks') and string::to-lower(no-hooks)=='true'}"/>
        </if>
        <if test="${create-result!='0'}">
            <echo message="*** ERROR creating ${create-fs-type} repository ${repo} in ${create-svn-root} ***" file="${subnant-output}" append="true"/>
            <property name="create-ok" value="false"/>
        </if>
    </target>
   
    <target name="copy-repos-conf">
        <property name="svnserve-conf" value="${path::combine(subnant-root,'conf/svnserve.conf')}"/>
        <if test="${file::exists(svnserve-conf)}">
            <copy file="${svnserve-conf}" overwrite="true" todir="${path::combine(create-svn-root,repo+'/conf')}"/>
        </if>
    </target>

    <target name="copy-repos-hooks">
        <property name="post-commit"         value="${path::combine(subnant-root,'hooks/post-commit'+file-ext)}"/>
        <property name="post-revprop-change" value="${path::combine(subnant-root,'hooks/post-revprop-change'+file-ext)}"/>
        <property name="pre-commit"          value="${path::combine(subnant-root,'hooks/pre-commit'+file-ext)}"/>
        <property name="pre-revprop-change"  value="${path::combine(subnant-root,'hooks/pre-revprop-change'+file-ext)}"/>
        <property name="start-commit"        value="${path::combine(subnant-root,'hooks/start-commit'+file-ext)}"/>
        <copy file="${post-commit}"         if="${file::exists(post-commit)}"         todir="${path::combine(create-svn-root,repo+'/hooks')}"/>
        <copy file="${post-revprop-change}" if="${file::exists(post-revprop-change)}" todir="${path::combine(create-svn-root,repo+'/hooks')}"/>
        <copy file="${pre-commit}"          if="${file::exists(pre-commit)}"          todir="${path::combine(create-svn-root,repo+'/hooks')}"/>
        <copy file="${pre-revprop-change}"  if="${file::exists(pre-revprop-change)}"  todir="${path::combine(create-svn-root,repo+'/hooks')}"/>
        <copy file="${start-commit}"        if="${file::exists(start-commit)}"        todir="${path::combine(create-svn-root,repo+'/hooks')}"/>
    </target>

    <target name="help">
        <echo level="Warning">
            <![CDATA[create: usage: subnant create -D:repos=<repos> [-D:<option>=<value>]

Create repositories in svn-root, copying configuration files
and hooks appropriate for current operating system, defined
in subnant/conf and subnant/hooks

Required:   
repos           comma separated list of repositories to create

Options:
svn-root        repository root directory *
svn-bindir      Subversion binary directory *
fs-type         type of repository to create: bdb or fsfs *
config-dir      read user configuration files from this directory *
bdb-log-keep    set true for automatic log file removal  [Berkeley DB]
bdb-txn-nosync  set true for fsync at transaction commit [Berkeley DB]
no-svnserve     set true to not copy subnant/conf/svnserve.conf
no-hooks        set true to not copy subnant/hooks/
sendmail        set true to email result

* If option not set, default value in subnant.config is used

Examples:
subnant create -D:repos=repo1
subnant create -D:repos=repo1,repo2 -D:svn-root=/svnroot/repos
subnant create verify -D:repos=repo1 -D:fs-type=fsfs -D:no-hooks=true
            ]]>
        </echo>
    </target>
   
</project>
