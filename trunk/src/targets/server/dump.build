<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="dump" default="dump">

    <target name="dump" depends="init">
        <foreach item="String" delim="," in="${dump-repos}" property="repo">
            <call target="svnadmin-dump"/>
        </foreach>
        <if test="${dump-ok=='true' and no-total!='true'}">
            <echo message="${string::pad-right('Dump complete',60,' ')}(${subnant::format-elapsed-time(dump-started, true)})" file="${subnant-output}" append="true"/>
        </if>
        <if test="${dump-ok!='true'}">
            <fail message="${string::pad-right('Dump completed with errors!',60,' ')}(${subnant::format-elapsed-time(dump-started, true)})"/>
        </if>
    </target>

    <target name="init" depends="init-windows,init-linux">
        <property name="dump-started"     value="${datetime::get-ticks(datetime::now())}"/>
        <property name="rev"              value="false" unless="${property::exists('rev')}"/>
        <property name="dump-incremental" value="false"/>
        <property name="dump-deltas"      value="false"/>
        <property name="dump-ok"          value="true"/>
        <property name="arg-incremental"  value=""/>
        <property name="arg-deltas"       value=""/>
        <!-- Read in defaults -->
        <property name="dump-repos"       value="${repos}" unless="${property::exists('dump-repos')}"/>
        <property name="no-total"         value="false"    unless="${property::exists('no-total')}"/>
        <xmlpeek file="${subnant-config}" xpath="/configuration/svn-repos/dump-root"     property="dump-root" unless="${property::exists('dump-root')}"/>
        <xmlpeek file="${subnant-config}" xpath="/configuration/svn-repos/compress-dump" property="ziplevel"  unless="${property::exists('compress')}"/>
        <!-- Assign from parameters -->
        <property name="ziplevel"         value="${compress}"    if="${property::exists('compress')}"/>
        <property name="dump-incremental" value="${incremental}" if="${property::exists('incremental')}"/>
        <property name="dump-deltas"      value="${deltas}"      if="${property::exists('deltas')}"/>
        <!-- Tidy up -->
        <property name="ziplevel"         value="${string::to-lower(string::trim(ziplevel))}"/>
        <property name="ziplevel"         value="6" if="${ziplevel=='true'}"/>
        <property name="dump-incremental" value="${string::to-lower(string::trim(dump-incremental))}"/>
        <property name="dump-deltas"      value="${string::to-lower(string::trim(dump-deltas))}"/>
        <!-- Assign switches -->
        <if test="${rev=='false'}">
            <property name="arg-revoption" value=""/>
            <property name="arg-revision"  value=""/>
        </if>
        <if test="${rev!='false'}">
            <property name="arg-revoption" value="--revision"/>
            <property name="arg-revision"  value="${rev}"/>
        </if>
        <property name="arg-incremental"  value="--incremental" if="${dump-incremental=='true'}"/>
        <property name="arg-deltas"       value="--deltas"      if="${dump-deltas=='true'}"/>
        <!-- Verify properties -->
        <fail unless="${directory::exists(dump-root)}" message="dump-root is invalid or does not exist in filesystem: ${dump-root}"/>
        <fail if="${dump-incremental!='false' and dump-incremental!='true'}" message="incremental must be set true or false"/>
        <fail if="${dump-deltas!='false' and dump-deltas!='true'}" message="deltas must be set true or false"/>
        <fail if="${ziplevel!='false' and int::parse(ziplevel)&lt;1 and int::parse(ziplevel)&gt;9}" message="compress must be set false or at compression level 1 (lowest) through to 9 (highest)"/>
    </target>

    <target name="init-windows" if="${platform::is-win32()}">
        <property name="dump" value="${path::combine(subnant-root,'src\include\dump.bat')}"/>
    </target>

    <target name="init-linux" if="${platform::is-unix()}">
        <property name="dump" value="${path::combine(subnant-root,'src/include/dump.sh')}"/>
    </target>

    <target name="init-dump">
        <property name="started"   value="${datetime::get-ticks(datetime::now())}"/>
        <property name="repo"      value="${subnant::return-directory-name(repo)}"/>
        <property name="dump-dir"  value="${dump-root+'/'+repo}"/>
        <property name="dump-file" value="${path::combine(dump-dir,repo)}"/>
        <property name="dump-file" if="${rev!='false'}" value="${dump-file+'.r'+string::replace(arg-revision,':','-')}"/>
        <property name="dump-file" value="${dump-file+'.dump'}"/>
        <mkdir dir="${dump-dir}" unless="${directory::exists(dump-dir)}"/>
    </target>

    <target name="svnadmin-dump">
        <call target="init-dump"/>
        <echo level="Warning" message="Dumping ${repo} ${string::trim(arg-revoption+' '+arg-revision+' '+arg-incremental+' '+arg-deltas)}"/>
        <exec program="${dump}" failonerror="${failonerror}" resultproperty="dump-result">
            <arg value="${svnadmin}"/>
            <arg value="${path::combine(svn-root,repo)}"/>
            <arg value="${dump-file}"/>
            <arg value="${arg-revoption}"/>
            <arg value="${arg-revision}"/>
            <arg value="${arg-incremental}"/>
            <arg value="${arg-deltas}"/>
        </exec>
        <echo file="${exec-result}" message="${dump-result}" append="false"/>
        <if test="${dump-result=='0' and file::exists(dump-file)}">
           <echo message="${string::pad-right('Dumped '+repo,60,' ')}(${subnant::format-length(file::get-length(dump-file),false)+' - '+subnant::format-elapsed-time(started, false)})" file="${subnant-output}" append="true"/>
            <call target="compress-dump-file" if="${ziplevel!='false'}"/>
        </if>
        <if test="${dump-result!='0'}">
            <echo message="${'*** ERROR dumping '+repo+' ***'}" file="${subnant-output}" append="true"/>
            <delete file="${dump-file}" if="${file::exists(dump-file)}"/>
            <property name="dump-ok" value="false"/>
        </if>
    </target>

    <target name="compress-dump-file">
        <property name="started"  value="${datetime::get-ticks(datetime::now())}"/>
        <property name="zip-file" value="${dump-file}.zip"/>
        <delete file="${zip-file}" if="${file::exists(zip-file)}"/>
        <echo level="Warning" message="Compressing ${path::get-file-name(dump-file)}"/>
        <zip zipfile="${zip-file}" failonerror="${failonerror}" ziplevel="${ziplevel}" comment="Subversion repository dump">
            <fileset>
                <include name="${dump-file}"/>   
            </fileset>
        </zip>
        <if test="${file::exists(zip-file)}">
            <delete file="${dump-file}" if="${file::exists(zip-file)}"/>
            <echo message="${string::pad-right('Compressed '+path::get-file-name(zip-file),60,' ')}(${subnant::format-length(file::get-length(zip-file),false)+' - '+subnant::format-elapsed-time(started, false)})" file="${subnant-output}" append="true"/>
        </if>
        <if test="${not file::exists(zip-file)}">
            <echo message="${'*** ERROR compressing '+repo+' (zip not created) ***'}" file="${subnant-output}" append="true"/>
            <property name="dump-ok" value="false"/>
        </if>
    </target>

    <target name="help">
        <echo level="Warning">
            <![CDATA[dump: usage: subnant dump [-D:<option>=<value>]

Dump and optionally compress repositories from svn-root to dump-root

Dump filename is based upon the name of the repository, the revision
or revision range being dumped and whether it is compressed

Dump filename format: <repos>.[rX[-Y]].dump[.zip]

Where X is the oldest and Y is the youngest revision

Example filenames:
repo1.dump              dump of all available revisions
repo1.r1.dump           dump of revision 1
repo1.r1-11.dump        dump of revisions 1 to 11
repo1.r1-11.dump.zip    compressed dump of revisions 1 to 11

Note: Dump filename format is assumed by the Subnant load target

Options:
repos           comma separated list of repositories to dump *
rev             dump revision number (or X:Y for range) **
dump-root       repository dump root directory ***
svn-root        repository root directory ***
svn-bindir      subversion binary directory ***
compress        set compression level 1 (lowest) to 9 (highest)
incremental     set true for svnadmin --incremental switch
deltas          set true for svnamdin --deltas switch

*   If repos not set, all repositories under svn-root are dumped
**  If rev not set, all revisions are dumped
*** If option not set, default value in subnant.config is used

Examples:
subnant dump -D:sendmail=dump@example.com
subnant dump -D:repos=repo1,repo2 -D:svn-root=/svnroot/repos -D:compress=9
]]>
        </echo>
    </target>

</project>