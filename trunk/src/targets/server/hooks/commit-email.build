<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="commit-email" default="commit-email">

    <!-- Main (default) Target -->
    <target name="commit-email" depends="init,get-hook-emails,get-commit-details">
        <if test="${string::get-length(mail_tolist)&gt;0}">
            <xmlpeek file="${config}" xpath="/configuration/mail/from"   property="mail_from"/>
            <xmlpeek file="${config}" xpath="/configuration/mail/host"   property="mail_host"/>
            <xmlpeek file="${config}" xpath="/configuration/mail/prefix" property="mail_prefix"/>
            <echo level="Warning" message="Sending commit-email for repository ${repo} on revision ${rev} to ${mail_tolist}"/>
            <mail mailhost="${mail_host}" from="${mail_from}" tolist="${mail_tolist}"
              subject="[${repo} commit] rev ${rev}">
                <files>
                    <include name="${temp-file}"/>
                </files>
            </mail>
            <echo file="${subnant-output}" append="true"
                message="Sent commit-email for repository ${repo} on revision ${rev} to ${mail_tolist}"/>
        </if>
        <if test="${string::get-length(mail_tolist)==0}">
            <echo file="${subnant-output}" append="true"
                message="Commit-email not sent for repository ${repo} on revision ${rev} (${hook-prop} not found)"/>
            <echo level="Warning" message="Commit-email not sent for repository ${repo} on revision ${rev} (${hook-prop} not found)"/>
        </if>
        <delete file="${temp-file}" if="${file::exists(temp-file)}"/>
    </target>

    <!-- Sub targets -->
    <target name="init">
        <fail unless="${property::exists('repos')}" message="repos not set"/>
        <fail unless="${property::exists('rev')}"   message="rev not set"/>
        <property name="hook-prop"   value="hook:commit-email" unless="${property::exists('hook-prop')}"/>
        <property name="repo"        value="${path::get-file-name(repos)}"/>
        <property name="mail_tolist" value=""/>
        <property name="dir-check"   value=""/>
        <property name="dir-list"    value=""/>
        <property name="temp-file"   value="${exec-output}-commit-email"/>
    </target>

    <target name="get-hook-emails">
        <!-- Get list of directories changed for revision -->
        <property name="subcommand" value="dirs-changed"/>
        <call target="exec-svnlook"/>
        <!-- Build directory tree list back to root node ::TODO:: -->
        <loadfile file="${exec-output}" property="dir-test"/>
        <property name="dir-test" value="${subnant::build-dir-list(dir-test)}"/>
        <!-- Temporary solution until ::TODO:: above is sorted -->
        <property name="dir-list" value="${exec-output}-dir-list"/>
        <copy file="${exec-output}" tofile="${dir-list}"/> 
        <!-- Search the built directory list -->
        <call target="find-hook-prop"/>
        <!-- Delete our temp directory list -->
        <delete file="${dir-list}" if="${file::exists(dir-list)}"/>
    </target>

    <target name="find-hook-prop">
        <!-- Don't fail svnlook if hook:commit-email property not found -->
        <property name="failonerror" value="false"/>
        <!-- Search for hook:commit-email property in each directory -->
        <foreach item="Line" in="${dir-list}" property="dir-check">
            <property name="subcommand" value="propget"/>
            <call target="exec-svnlook"/>
            <!-- If hook:commit-email found, add each address only once -->
            <if test="${svnlook-result=='0'}">
                <!-- Email addresses may be line delimited -->
                <foreach item="Line" in="${exec-output}" property="address-line">
                    <!-- Replace , with ; as per spec for NAnt mail task -->
                    <property name="address-line" value="${string::replace(address-line,',',';')}"/>
                    <!-- Email addresses may be ; delimited -->
                    <foreach item="String" delim=";" in="${address-line}" property="address">
                        <!-- Only add address if it doesn't already exist in list -->
                        <property name="mail_tolist" value="${mail_tolist};${address}"
                            unless="${string::contains(string::to-lower(mail_tolist),string::to-lower(address))}"/>
                    </foreach>
                </foreach>
            </if>
        </foreach>
        <!-- Trim start of address list to remove ; if it exists -->
        <property name="mail_tolist" value="${string::substring(mail_tolist,1,string::get-length(mail_tolist)-1)}"
            if="${string::starts-with(mail_tolist,';')}"/>
        <!-- Done searching, so turn failonerror back on -->
        <property name="failonerror" value="true"/>
    </target>

    <target name="get-commit-details">
        <!-- Who changed it -->
        <property name="subcommand" value="author"/>
        <call target="exec-svnlook"/>
        <loadfile file="${exec-output}" property="temp-prop"/>
        <echo file="${temp-file}" message="Author: ${temp-prop}"/>
        <!-- Why was it changed -->
        <property name="subcommand" value="log"/>
        <call target="exec-svnlook"/>
        <loadfile file="${exec-output}" property="temp-prop"/>
        <echo file="${temp-file}" append="true" message="Log: ${temp-prop}"/>
        <!-- What changed and when -->
        <property name="subcommand" value="diff"/>
        <call target="exec-svnlook"/>
        <loadfile file="${exec-output}" property="temp-prop"/>
        <echo file="${temp-file}" append="true" message="${temp-prop}"/>
    </target>

    <target name="exec-svnlook">
        <exec program="${svnlook}" failonerror="${failonerror}" output="${exec-output}" append="false" resultproperty="svnlook-result">
            <arg value="${subcommand}"/>
            <arg value="${repos}"/>
            <!-- propget (used by get-hook-emails) should not use revision -->
            <arg value="--revision" unless="${subcommand=='propget'}"/>
            <arg value="${rev}"     unless="${subcommand=='propget'}"/>
            <!-- propget (used by get-hook-emails) needs property and path -->
            <arg value="${hook-prop}" if="${subcommand=='propget'}"/>
            <arg value="${dir-check}" if="${subcommand=='propget'}"/>
            <!-- Set optional parameter (used by get-commit-details) -->
            <arg value="--no-diff-delete" if="${subcommand=='diff' and property::exists('no-diff-delete') and string::trim(string::to-lower(no-diff-delete))=='true'}"/>
        </exec>
        <echo if="${svnlook-result!='0' and failonerror!='false'}" file="${subnant-output}" message="*** ERROR executing svnlook ${subcommand} on repository ${repos} ***" append="true"/>
        <echo if="${svnlook-result!='0' and failonerror!='false'}" level="Warning" message="*** ERROR executing svnlook ${subcommand} on repository ${repos} ***"/>
        <fail unless="${file::exists(exec-output)}" message="*** ERROR svnlook ${subcommand} output file not found: ${exec-output} ***"/>
    </target>

    <target name="help">
        <echo level="Warning">
            <![CDATA[commit-email: usage: subnant commit-email -D:repos=<repos> -D:rev=<rev> [-D:<option>=<value>]

Sends email on who, why, when, where and what changed in a revision.

Finds email addresses using Subversion property hook:commit-email
on directory of affected file(s).  Will recursive up the directory
tree back to the root node searching for hook:commit-email property.

Typically used in post-commit hook, but can be called independently.

Multiple email addresses stored in hook:commit-email property may be
comma or semi-comma or line separated.
            
Required:
repos            full path to repository
rev              revision number (must exist in repository)

Options:
no-diff-deleted  set true to not print differences for deleted files
hook-prop        search for another property (not hook:commit-email)
sendmail         set true to email result

Examples:
subnant commit-email -D:repos=/path/to/repo -D:rev=1 -D:no-diff-deleted=true
            ]]>
        </echo>
    </target>
   
</project>
