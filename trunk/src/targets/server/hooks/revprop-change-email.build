<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$
-->
<project name="revprop-change-email" default="revprop-change-email" xmlns="http://nant.sf.net/release/0.85/nant.xsd">

    <!-- Main (default) Target -->
    <target name="revprop-change-email" depends="init,get-hook-emails">
        <if test="${prop-list!=''}">
            <call target="build-changes" />
            <call target="mail-changes" />
        </if>
    </target>

    <!-- Sub targets -->
    <target name="init">
        <fail unless="${property::exists('repos')}"    message="repos not set" />
        <fail unless="${property::exists('rev')}"      message="rev not set" />
        <fail unless="${property::exists('user')}"     message="user not set" />
        <fail unless="${property::exists('propname')}" message="propname not set" />
        <property name="action"       value="" overwrite="false" />
        <property name="hook-prop"    value="hook:revprop-change-email" overwrite="false" />
        <property name="svnlook-file" value="${exec-output}-svnlook-result" />
        <property name="dir-file"     value="${exec-output}-revprop-change-email" />
        <property name="repo"         value="${path::get-file-name(repos)}" />
        <property name="mail-tolist"  value="" />
        <property name="prop-list"    value="" />
        <property name="dir-check"    value="" />
    </target>

    <target name="get-hook-emails">
        <!-- Get list of directories changed for revision -->
        <property name="subcommand" value="dirs-changed" />
        <call target="exec-svnlook" />
        <loadfile file="${exec-output}" property="dir-list-prop" />
        <!-- Build unique directory tree list back to root node -->
        <echo file="${dir-file}" message="${subnant::build-dir-list(dir-list-prop)}" />
        <!-- Search the built directory list -->
        <call target="find-hook-prop" />
        <!-- Delete our temp directory list -->
        <delete file="${dir-file}" if="${file::exists(dir-file)}" />
    </target>

    <target name="find-hook-prop">
        <!-- Don't fail svnlook if hook:revprop-change-email property not found -->
        <property name="orig-failonerror" value="${failonerror}" />
        <property name="failonerror" value="false" />
        <!-- Search for hook:revprop-change-email property in each directory -->
        <foreach item="Line" in="${dir-file}" property="dir-check">
            <property name="subcommand" value="propget" />
            <call target="exec-svnlook" />
            <!-- If hook:revprop-change-email found, add each address -->
            <if test="${svnlook-result=='0'}">
                <!-- Email addresses may be line delimited -->
                <foreach item="Line" in="${exec-output}" property="address-line">
                    <!-- Only add address if it and subcommand don't already exist in list -->
                    <property name="prop-list" value="${prop-list};${address-line}"
                        unless="${string::contains(string::to-lower(prop-list),string::to-lower(address-line))}" />
                </foreach>
            </if>
        </foreach>
        <!-- Trim start of list to remove semi-comma (if it exists) -->
        <property name="prop-list" value="${string::substring(prop-list,1,string::get-length(prop-list)-1)}"
            if="${string::starts-with(prop-list,';')}" />
        <property name="failonerror" value="${orig-failonerror}" />
        <property name="mail-tolist" value="${prop-list}" />
    </target>

    <target name="build-changes">
        <echo message="Author: ${user}"  file="${svnlook-file}" append="false" />
        <echo message="${newline}Revision: ${rev}" file="${svnlook-file}" append="true" />
        <if test="${action!=''}">
            <property name="action-text" if="${action=='A'}" value="Added" />
            <property name="action-text" if="${action=='M'}" value="Modified" />
            <property name="action-text" if="${action=='D'}" value="Deleted" />
            <echo message="${newline}Action: ${action-text}" file="${svnlook-file}" append="true" />
        </if>
        <echo message="${newline}Property: ${propname}" file="${svnlook-file}" append="true" />
        <if test="${action!='A'}">
            <echo message="${newline}Old value: ${subnant::get-stdin()}" file="${svnlook-file}" append="true" />
        </if>   
        <if test="${action!='D'}">
            <exec program="${svnlook}" failonerror="${failonerror}" output="${exec-output}" append="false" resultproperty="svnlook-result">
                <arg value="propget" />
                <arg value="--revprop" />
                <arg value="--revision" />
                <arg value="${rev}" />
                <arg value="${repos}" />
                <arg value="${propname}" />
            </exec>
            <if test="${svnlook-result!='0' and failonerror!='false'}">
                <log-echo message="*** ERROR executing svnlook ${subcommand} on repository ${repos} ***" file="${subnant-output}" />
            </if>
            <fail unless="${file::exists(exec-output)}" message="*** ERROR svnlook ${subcommand} output file not found: ${exec-output} ***" />
            <loadfile file="${exec-output}" property="propval" />
            <property name="prepend" if="${action=='A'}" value="Value" />   
            <property name="prepend" if="${action!='A'}" value="New value" />   
            <echo message="${newline}${prepend}: ${propval}" file="${svnlook-file}" append="true" />
        </if>
    </target>

    <target name="mail-changes">
        <xmlpeek file="${subnant-config}" xpath="/configuration/mail/from" property="mail-from" />
        <xmlpeek file="${subnant-config}" xpath="/configuration/mail/host" property="mail-host" />
        <echo message="Sending revprop-change-email for repository ${repo} on revision ${rev} to ${mail-tolist}" level="Warning" />
        <mail mailhost="${mail-host}" from="${mail-from}" tolist="${mail-tolist}"
          subject="[${repo} revprop-change] rev ${rev}">
            <files>
                <include name="${svnlook-file}" />
            </files>
        </mail>
        <echo message="Sent revprop-change-email for repository ${repo} on revision ${rev} to ${mail-tolist}" file="${subnant-output}" append="true" />
        <delete file="${svnlook-file}" if="${file::exists(svnlook-file)}" />
    </target>

    <target name="exec-svnlook">
        <exec program="${svnlook}" failonerror="${failonerror}" output="${exec-output}" append="false" resultproperty="svnlook-result">
            <arg value="${subcommand}" />
            <arg value="${repos}" />
            <!-- propget (used by get-hook-emails) should not use revision -->
            <arg value="--revision" unless="${subcommand=='propget'}" />
            <arg value="${rev}"     unless="${subcommand=='propget'}" />
            <!-- propget (used by get-hook-emails) needs property and path -->
            <arg value="${hook-prop}" if="${subcommand=='propget'}" />
            <arg value="${dir-check}" if="${subcommand=='propget'}" />
        </exec>
        <if test="${svnlook-result!='0' and failonerror!='false'}">
            <log-echo message="*** ERROR executing svnlook ${subcommand} on repository ${repos} ***" file="${subnant-output}" />
        </if>
        <fail unless="${file::exists(exec-output)}" message="*** ERROR svnlook ${subcommand} output file not found: ${exec-output} ***" />
    </target>

    <target name="help">
        <echo level="Warning">
            <![CDATA[revprop-change-email:
Usage: subnant revprop-change-email -D:repos=<repos> -D:rev=<rev> [-D:<option>=<value>]

Purpose: Sends email about revision property changes in a committed revision

Searches for email addresses using Subversion hook:revprop-change-email
property on directory or parent directories of affected file(s)

Multiple email addresses can be stored as line delimited values

Output generated in email shows the author, revision, action, revision
property name, if revision property is modified or deleted, the previous
property value, and if added or modified, the new property value

Should be used in conjunction with the post-revprop-change hook

Required:
repos            full path to repository
rev              revision number (must exist in repository)
user             name of author who modified revision property
propname         name of revision property modified

Options:
hook-prop        search for another property (i.e. not hook:revprop-change-email)
action           property is being 'A'dded, 'M'odified, or 'D'eleted

Examples:
subnant revprop-change-email -D:repos=/path/to/repos -D:rev=1 -D:user=foo -D:propname=svn:log -D:action=M
]]>
        </echo>
    </target>

</project>
