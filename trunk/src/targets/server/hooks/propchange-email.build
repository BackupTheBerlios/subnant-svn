<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$
-->
<project name="propchange-email" default="propchange-email">

    <!-- Main (default) Target -->
    <target name="propchange-email" depends="init,get-hook-emails,get-propchange-details">
        <if test="${string::get-length(mail-tolist)>0}">
            <xmlpeek file="${subnant-config}" xpath="/configuration/mail/from"   property="mail-from"/>
            <xmlpeek file="${subnant-config}" xpath="/configuration/mail/host"   property="mail-host"/>
            <xmlpeek file="${subnant-config}" xpath="/configuration/mail/prefix" property="mail-prefix"/>
            <echo level="Warning" message="Sending propchange-email for repository ${repo} on revision ${rev} to ${mail-tolist}"/>
            <mail mailhost="${mail-host}" from="${mail-from}" tolist="${mail-tolist}"
              subject="[${repo} propchange] rev ${rev}">
                <files>
                    <include name="${temp-file}"/>
                </files>
            </mail>
            <echo file="${subnant-output}" append="true"
                message="Sent propchange-email for repository ${repo} on revision ${rev} to ${mail-tolist}"/>
        </if>
        <if test="${string::get-length(mail-tolist)==0}">
            <echo file="${subnant-output}" append="true"
                message="Propchange-email not sent for repository ${repo} on revision ${rev} (${hook-prop} not found)"/>
            <echo level="Warning" message="Propchange-email not sent for repository ${repo} on revision ${rev} (${hook-prop} not found)"/>
        </if>
        <delete file="${temp-file}" if="${file::exists(temp-file)}"/>
    </target>

    <!-- Sub targets -->
    <target name="init">
        <fail unless="${property::exists('repos')}" message="repos not set"/>
        <fail unless="${property::exists('rev')}"   message="rev not set"/>
        <property name="hook-prop"   value="hook:propchange-email" unless="${property::exists('hook-prop')}"/>
        <property name="repo"        value="${path::get-file-name(repos)}"/>
        <property name="mail-tolist" value=""/>
        <property name="dir-check"   value=""/>
        <property name="dir-list"    value=""/>
        <property name="temp-file"   value="${exec-output}-commit-email"/>
    </target>

    <target name="get-hook-emails">
        <!-- Get list of directories changed for revision -->
        <property name="subcommand" value="dirs-changed"/>
        <call target="exec-svnlook"/>
        <!-- Build directory tree list back to root node ::TODO:: -->
        <property name="dir-list" value="${exec-output}-dir-list"/>
        <!-- Temporary solution until ::TODO:: above is done-->
        <copy file="${exec-output}" tofile="${dir-list}"/> 
        <!-- Don't fail if hook:commit-email property not found -->
        <property name="orig-failonerror" value="${failonerror}"/>
        <property name="failonerror" value="false"/>
        <!-- Search for hook:commit-email property in each directory found -->
        <foreach item="Line" in="${dir-list}" property="dir-check">
            <property name="subcommand" value="propget"/>
            <call target="exec-svnlook"/>
            <if test="${svnlook-result=='0'}">
                <foreach item="Line" in="${exec-output}" property="address-line">
                    <property name="address-line" value="${string::replace(address-line,',',';')}"/>
                    <foreach item="String" delim=";" in="${address-line}" property="address">
                        <!-- Only add address if it doesn't already exist in list -->
                        <property name="mail-tolist" value="${mail-tolist};${address}"
                            unless="${string::contains(string::to-lower(mail-tolist),string::to-lower(address))}"/>
                    </foreach>
                </foreach>
            </if>
        </foreach>
        <!-- Trim start of address list to remove ; if it exists -->
        <property name="mail-tolist" value="${string::substring(mail-tolist,1,string::get-length(mail-tolist)-1)}"
            if="${string::starts-with(mail-tolist,';')}"/>
        <property name="failonerror" value="${orig-failonerror}"/>
        <delete file="${dir-list}" if="${file::exists(dir-list)}"/>
    </target>

    <target name="get-propchange-details">
    </target>

    <target name="exec-svnlook">
        <exec program="${svnlook}" failonerror="${failonerror}" output="${exec-output}" append="false" resultproperty="svnlook-result">
            <arg value="${subcommand}"/>
            <arg value="${repos}"/>
            <!-- propget (used by get-hook-emails) should not use revision -->
            <arg value="--revision" unless="${subcommand=='propget'}"/>
            <arg value="${rev}"     unless="${subcommand=='propget'}"/>
            <!-- propget (used by get-hook-emails) needs property and path -->
            <arg value="${hook-prop}" if="${subcommand=='propget'}"/>
            <arg value="${dir-check}" if="${subcommand=='propget'}"/>
            <!-- Set optional parameter (used by get-commit-details) -->
            <arg value="--no-diff-delete" if="${subcommand=='diff' and property::exists('no-diff-delete') and string::trim(string::to-lower(no-diff-delete))=='true'}"/>
        </exec>
        <echo if="${svnlook-result!='0' and failonerror!='false'}" message="*** ERROR executing svnlook ${subcommand} on repository ${repos} ***" file="${subnant-output}" append="true"/>
        <echo if="${svnlook-result!='0' and failonerror!='false'}" message="*** ERROR executing svnlook ${subcommand} on repository ${repos} ***" level="Warning"/>
        <fail unless="${file::exists(exec-output)}" message="*** ERROR svnlook ${subcommand} output file not found: ${exec-output} ***"/>
    </target>

    <target name="help">
        <echo level="Warning">
            <![CDATA[propchange-email: usage: subnant propchange-email -D:repos=<repos> -D:rev=<rev> [-D:<option>=<value>]

Sends email about revision property changes in a committed revision.

Searches for email addresses using Subversion hook:propchange-email property
on directory or parent directories of affected file(s).  Multiple email
addresses can be stored as line delimited values.

Output generated in email defaults to svnlook diff for revision, but may
be defined in hook:propchange-email for each address using address=subcommand
syntax, e.g. subnant@example.com=info,diff  

Accepted svnlook subcommands are:
author, changed, date, diff, dirs-changed, history, info, log, tree

Normally used with post-revprop-change hook, but may be called independently.            

Required:
repos            full path to repository
rev              revision number (must exist in repository)

Options:
user             name of user changing property (if empty uses svnlook author)
propname         name of property changed (if empty uses svnlook diff)
no-diff-deleted  set true to not print differences for deleted properties
hook-prop        search for another property (not hook:propchange-email)

Examples:
subnant propchange-email -D:repos=/path/to/repo1 -D:rev=1
]]>
        </echo>
    </target>
   
</project>