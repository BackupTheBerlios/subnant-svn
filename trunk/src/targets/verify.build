<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="verify" default="verify">

    <target name="verify" depends="init" description="Verify Subversion repositories">
        <foreach item="String" delim="," in="${repos}" property="repo">
            <exec program="${svnadmin}" failonerror="true" output="${output-file}" append="true">
                <arg value="verify"/>
                <arg value="${path::combine(svn-root,repo)}"/>
            </exec>
            <echo file="${log-file}" message="Verified repository '${path::get-file-name(repo)}'" append="true"/>  
            <write>Verified repository '${path::get-file-name(repo)}'</write>
        </foreach>
    </target>

    <target name="init">
        <!-- Ready properties --> 
        <property name="svnadmin" value="${path::combine(svn-bindir,'svnadmin')}"/>
        <!-- Verify repositories exist if command-line parameter given -->
        <if test="${property::exists('repos')}">
            <if test="${string::get-length(repos)==0}">
                <echo file="${log-file}" message="Property 'repos' was defined but no value set" append="true"/>  
                <fail message="Property 'repos' was defined but no value set"/>
            </if>   
            <foreach item="String" in="${repos}" delim="," property="repo">
                <ifnot test="${directory::exists(path::combine(svn-root,repo)) and file::exists(path::combine(svn-root,path::combine(repo,'db/fs-type')))}">
                    <echo file="${log-file}" message="Can't find repository '${repo}' under ${svn-root}" append="true"/>  
                    <fail message="Can't find repository '${repo}' under ${svn-root}"/>
                </ifnot>
                <loadfile file="${path::combine(svn-root,path::combine(repo,'db/fs-type'))}" property="fs-type-test"/>
                <ifnot test="${string::contains(fs-type-test,'bdb') or string::contains(fs-type-test,'fsfs')}">  
                    <echo file="${log-file}" message="'${repo}' is not a 'bdb' or 'fsfs' type of repository" append="true"/>  
                    <fail message="'${repo}' is not a 'bdb' or 'fsfs' type of repository"/>
                </ifnot>
            </foreach>
        </if>
        <!-- Build list of repositories under svn-root if command-line parameter not given -->
        <ifnot test="${property::exists('repos')}">
            <property name="repos" value=""/>
            <foreach item="Folder" in="${svn-root}" property="repo">
                <do>
                    <property name="fs-type-test" value=""/>
                    <loadfile file="${path::combine(repo,'db/fs-type')}" property="fs-type-test" failonerror="false"/>
                    <if test="${string::contains(fs-type-test,'bdb') or string::contains(fs-type-test,'fsfs')}">  
                        <property name="repos" value="${repos+repo+','}"/>
                    </if>  
                </do>
            </foreach>
            <!-- Trim trailing comma -->
            <if test="${string::get-length(repos)>0}">
                <property name="repos" value="${string::substring(repos,0,string::get-length(repos)-1)}"/>
            </if>
            <ifnot test="${string::get-length(repos)>0}">
                <echo file="${log-file}" message="No repositories found under ${svn-root}" append="true"/>  
                <fail message="No repositories found under ${svn-root}"/>
            </ifnot>
        </ifnot>   
    </target>

    <target name="help">
<write><![CDATA[Verify repositories using svnadmin

If no options are passed, verify all repositories under 'svn-root'

Options:
repos           comma separated list of repositories under 'svn-root'
svn-root        override subnant.config with new repository root directory
svn-bindir      override subnant.config with new subversion binary directory

Examples:
subnant verify
subnant verify -D:repos=repo1,repo2
subnant verify -D:svn-root=/tmp/svnroot]]></write>
    </target>
   
</project>
