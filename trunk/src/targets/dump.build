<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="dump" default="dump">

    <target name="dump" depends="init">
        <foreach item="String" delim="," in="${dump-repos}" property="repo">
            <call target="init-dump"/>
            <echo level="Warning" message="Dumping repository ${string::trim(repo+' '+arg_revoption+' '+arg_revision+' '+arg_incremental+' '+arg_deltas)}"/>
            <exec program="${dump}" failonerror="${failonerror}" resultproperty="dump-result">
                <arg value="${svnadmin}"/>
                <arg value="${path::combine(dump-svn-root,repo)}"/>
                <arg value="${dump-file}"/>
                <arg value="${arg_revoption}"/>
                <arg value="${arg_revision}"/>
                <arg value="${arg_incremental}"/>
                <arg value="${arg_deltas}"/>
            </exec>
            <echo file="${exec-result}" message="${dump-result}" append="false"/>   
            <echo if="${dump-result=='0'}" file="${subnant-output}" message="${string::pad-right('Dumped repository '+repo+'   ('+subnant::length-in-mb(file::get-length(dump-file))+'MB)',60,' ')}(${subnant::get-elapsed-time(dump-started)})" append="true"/>
            <echo if="${dump-result!='0'}" file="${subnant-output}" message="${'*** ERROR dumping repository '+repo+' ***'}" append="true"/>
            <call target="compress-dump-file" if="${dump-result=='0' and compress-dump!='false'}"/>
        </foreach>
    </target>

    <target name="init" depends="init-windows,init-linux">
        <property name="dump-repos"    value="${repos}"    unless="${property::exists('dump-repos')}"/>   
        <property name="dump-svn-root" value="${svn-root}" unless="${property::exists('dump-svn-root')}"/>
        <property name="dump-rev"      value="${rev}"      unless="${property::exists('dump-rev')}" if="${property::exists('rev')}"/>
        <property name="dump-rev"      value="false"       unless="${property::exists('dump-rev')}"/>
        <property name="compress-dump" value="${string::trim(string::to-lower(compress))}" if="${property::exists('compress')}"/>
        <property name="compress-dump" value="false" unless="${property::exists('compress')}"/>
        <xmlpeek file="${config}" xpath="/configuration/svn-repos/dump-root"    
            property="dump-root" unless="${property::exists('dump-root')}"/>
        <property name="incremental-dump" value="${string::trim(string::to-lower(incremental))}" if="${property::exists('incremental')}"/>
        <property name="incremental-dump" value="false" unless="${property::exists('incremental')}"/>
        <property name="deltas-dump"      value="${string::trim(string::to-lower(deltas))}" if="${property::exists('deltas')}"/>
        <property name="deltas-dump"      value="false" unless="${property::exists('deltas')}"/>
        <fail if="${compress-dump!='false' and int::parse(compress-dump)&lt;1 and int::parse(compress-dump)&gt;9}"
            message="compress must be set false or at compression level 1 (lowest) through to 9 (highest)"/>
        <fail unless="${directory::exists(dump-root)}" message="Repository dump root directory doesn't exist: ${dump-root}"/>
        <property name="arg_revision"     value=""/>
        <property name="arg_revoption"    value=""/>
        <property name="arg_incremental"  value=""/>
        <property name="arg_deltas"       value=""/>
        <property name="arg_revision"     value="${dump-rev}"   if="${dump-rev!='false'}"/>
        <property name="arg_revoption"    value="--revision"    if="${dump-rev!='false'}"/>
        <property name="arg_incremental"  value="--incremental" if="${incremental-dump=='true'}"/>
        <property name="arg_deltas"       value="--deltas"      if="${deltas-dump=='true'}"/>
    </target>

    <target name="init-windows" if="${platform::is-win32()}">
        <property name="dump" value="${path::combine(subnant-root,'src\inc\dump.bat')}"/>
    </target>

    <target name="init-linux" if="${platform::is-unix()}">
        <property name="dump" value="${path::combine(subnant-root,'src/inc/dump.sh')}"/>
        <echo level="Warning" message="dump: ${dump}"/>   
    </target>

    <target name="init-dump">
        <property name="dump-started" value="${datetime::get-ticks(datetime::now())}"/>
        <property name="dump-file" if="${dump-rev=='false'}" value="${path::combine(dump-root,repo+'.dump')}"/>
        <property name="dump-file" if="${dump-rev!='false'}" value="${path::combine(dump-root,repo+'-'+string::replace(arg_revision,':','-')+'.dump')}"/>
    </target>

    <target name="compress-dump-file">
        <property name="zip-started" value="${datetime::get-ticks(datetime::now())}"/>
        <property name="zip-file"    value="${dump-file}.zip"/>
        <echo level="Warning" message="Compressing ${path::get-file-name(dump-file)}"/>
        <zip zipfile="${zip-file}" failonerror="${failonerror}" ziplevel="${compress-dump}" comment="Subversion repository dump">
            <fileset>
                <include name="${dump-file}"/>   
            </fileset>
        </zip>
        <delete file="${dump-file}"/>
        <echo file="${subnant-output}" message="${string::pad-right('Compressed '+path::get-file-name(zip-file)+' ('+subnant::length-in-mb(file::get-length(zip-file))+'MB)',60,' ')}(${subnant::get-elapsed-time(zip-started)})" append="true"/>
    </target>

    <target name="help">
        <echo level="Warning">
            <![CDATA[dump: usage: subnant dump [-D:<option>=<value>]

Dump repositories using svnadmin, optionally compressing dump file

Options:
repos           comma separated list of repositories to dump *
rev             dump revision number (or X:Y for range) **
dump-root       repository dump root directory ***
svn-root        repository root directory ***
svn-bindir      subversion binary directory ***
compress        set compression level 1 (lowest) to 9 (highest)
incremental     set true for svnadmin --incremental switch
deltas          set true for svnamdin --deltas switch
sendmail        set true to email result

*   If repos not set, all repositories under svn-root are dumped
**  If rev not set, all revisions dumped
*** If option not set, default value in subnant.config is used

Examples:
subnant dump
subnant dump -D:repos=repo1,repo2 -D:sendmail=true
subnant dump -D:svn-root=/svnroot/repos -D:compress=9
            ]]>
        </echo>
    </target>

</project>