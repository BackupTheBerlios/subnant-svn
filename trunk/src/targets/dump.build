<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="dump" default="dump">

    <target name="dump" depends="init">
        <foreach item="String" delim="," in="${repos}" property="repo">
            <call target="init-dump-file"/>
            <echo level="Warning" message="Dumping repository ${string::trim(repo+' '+arg_revoption+' '+arg_revision+' '+arg_incremental+' '+arg_deltas)}"/>
            <exec program="${dump}" failonerror="${failonerror}" resultproperty="exec-result">
                <arg value="${svnadmin}"/>
                <arg value="${path::combine(svn-root,repo)}"/>
                <arg value="${dump-file}"/>
                <arg value="${arg_revoption}"/>
                <arg value="${arg_revision}"/>
                <arg value="${arg_incremental}"/>
                <arg value="${arg_deltas}"/>
            </exec>
            <echo if="${exec-result=='0'}" file="${subnant-output}" message="${string::pad-right('Dumped repository '+repo,60,' ')}(${subnant::get-elapsed-time(dump-started,datetime::now())})" append="true"/>
            <echo if="${exec-result!='0'}" file="${subnant-output}" message="${string::pad-right('*** ERROR dumping repository '+repo+' ***',60,' ')}(${subnant::get-elapsed-time(dump-started,datetime::now())})" append="true"/>
            <call target="compress-dump-file" if="${exec-result=='0' and compress!='false'}"/>
        </foreach>
    </target>

    <target name="init-dump-file">
        <property name="dump-started" value="${datetime::now()}"/>
        <property name="dump-file" if="${rev=='false'}" value="${path::combine(dump-root,repo+'.dumpfile')}"/>
        <property name="dump-file" if="${rev!='false'}" value="${path::combine(dump-root,repo+'-'+string::replace(arg_revision,':','-')+'.dumpfile')}"/>
    </target>

    <target name="compress-dump-file">
        <property name="zip-started" value="${datetime::now()}"/>
        <echo level="Warning" message="Compressing ${path::get-file-name(dump-file)}"/>
        <zip zipfile="${dump-file}.zip" failonerror="${failonerror}" ziplevel="${compress}" comment="Subversion repository dump">
            <fileset>
                <include name="${dump-file}"/>   
            </fileset>
        </zip>
        <delete file="${dump-file}"/>
        <echo file="${subnant-output}" message="${string::pad-right('Compressed '+path::get-file-name(dump-file)+'.zip to '+subnant::length-in-mb(file::get-length(dump-file+'.zip'))+'MB',60,' ')}(${subnant::get-elapsed-time(zip-started,datetime::now())})" append="true"/>
    </target>

    <target name="init" depends="init-windows,init-linux">
        <!-- dump all revisions unless told not to, so rev is false by default -->
        <property name="rev" value="false" unless="${property::exists('rev')}"/>
        <!-- Read dump properties from config unless set from command-line -->
        <xmlpeek file="${config}" xpath="/configuration/svn-dumps/dump-root"    
            property="dump-root" unless="${property::exists('dump-root')}"/>
        <xmlpeek file="${config}" xpath="/configuration/svn-dumps/compress"
            property="compress" unless="${property::exists('compress')}"/>
        <xmlpeek file="${config}" xpath="/configuration/svn-dumps/incremental"
            property="incremental" unless="${property::exists('incremental')}"/>
        <xmlpeek file="${config}" xpath="/configuration/svn-dumps/deltas"
            property="deltas" unless="${property::exists('deltas')}"/>
        <!-- Verify dump directory is valid -->
        <if test="${string::get-length(svn-bindir)&gt;0 and directory::exists(svn-bindir)!=true}">
            <fail message="Subversion binary directory doesn't exist: ${svn-bindir}"/>
        </if>
        <!-- Ready properties -->
        <property name="compress"    value="${string::trim(string::to-lower(compress))}"/>
        <property name="incremental" value="${string::trim(string::to-lower(incremental))}"/>
        <property name="deltas"      value="${string::trim(string::to-lower(deltas))}"/>
        <property name="arg_revision"    value=""/>
        <property name="arg_revoption"   value=""/>
        <property name="arg_incremental" value=""/>
        <property name="arg_deltas"      value=""/>
        <property name="arg_revision"    value="${rev}"        if="${rev!='false'}"/>
        <property name="arg_revoption"   value="--revision"    if="${rev!='false'}"/>
        <property name="arg_incremental" value="--incremental" if="${incremental=='true'}"/>
        <property name="arg_deltas"      value="--deltas"      if="${deltas=='true'}"/>
        <!-- Verify properties -->
        <fail if="${compress!='false' and int::parse(compress)&lt;1 and int::parse(level)&gt;9}"
            message="compress option must be set false or compression level 1 (lowest) to 9 (highest)"/>
    </target>

    <target name="init-windows" if="${platform::is-win32()}">
        <property name="dump" value="${path::combine(subnant-root,'src\inc\dump.bat')}"/>
    </target>

    <target name="init-linux" if="${platform::is-unix()}">
        <property name="dump" value="{path::combine(subnant-root,'src/inc/dump.sh')}"/>
    </target>

    <target name="help">
        <echo level="Warning">
            <![CDATA[dump: usage: subnant dump [-D:option=value]

Dump repositories using svnadmin

If repos not set, dump all repositories under svn-root

Options:
repos           comma separated list of repositories under svn-root
rev             dump revision number (or X:Y for range)
dump-root       repository dump root directory
svn-root        repository root directory
svn-bindir      subversion binary directory
compress        set compression level 1 (lowest) to 9 (highest)
incremental     set true for svnadmin --incremental switch
deltas          set true for svnamdin --deltas switch
sendmail        set true to email result

Examples:
subnant dump
subnant dump -D:repos=repo1,repo2 -D:sendmail=true
subnant dump -D:svn-root=/svnroot/repos -D:compress=9
            ]]>
        </echo>
    </target>

</project>