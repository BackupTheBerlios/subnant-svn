<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html <http://www.gnu.org/copyleft/gpl.html> 

$Id$ 
-->
<project name="create" default="create">

    <target name="create" depends="init">
        <foreach item="String" delim="," in="${repos}" property="repo">
            <property name="repo" value="${string::trim(repo)}"/>
            <exec program="${svnadmin}" failonerror="true" output="${output-file}" append="true">
                <arg value="create"/>
                <arg value="--bdb-txn-nosync" if="${fs-type=='bdb' and bdb-txn-nosync=='true'}"/>
                <arg value="--bdb-log-keep"   if="${fs-type=='bdb' and bdb-log-keep=='true'}"/>
                <arg value="--config-dir"     if="${string::get-length(config-dir)>0}"/>
                <arg value="${config-dir}"    if="${string::get-length(config-dir)>0}"/>
                <arg value="--fs-type"/>
                <arg value="${fs-type}"/>
                <arg value="${path::combine(svn-root,repo)}"/>
            </exec>
            <echo file="${log-file}" message="Created repository ${repo}" append="true"/>
            <write>Created ${fs-type} repository ${repo} under ${svn-root}</write>
            <call target="copy-repos-conf"  unless="${property::exists('no-svnserve') and string::to-lower(no-svnserve)=='true'}"/>
            <call target="copy-repos-hooks" unless="${property::exists('no-hooks') and string::to-lower(no-hooks)=='true'}"/>
        </foreach>
    </target>

    <target name="init">
        <!-- Assign config values to properties so long as they haven't been passed as a command-line parameter -->
        <xmlpeek file="${config}" xpath="/configuration/svn-repos/fs-type"    property="fs-type"    unless="${property::exists('fs-type')}"/>
        <xmlpeek file="${config}" xpath="/configuration/svn-repos/config-dir" property="config-dir" unless="${property::exists('config-dir')}"/>
        <!-- Ready properties -->
        <property name="fs-type"    value="${string::trim(string::to-lower(fs-type))}"/>
        <property name="config-dir" value="${string::trim(config-dir)}"/>
        <!-- Verify properties -->
        <fail if="${property::exists('repos')==false}" message="Can't create repository as 'repos' property not defined"/>
        <fail if="${fs-type!='bdb' and fs-type!='fsfs'}" message="fs-type must be 'bdb' or 'fsfs'"/>
        <fail if="${string::get-length(config-dir)>=0 and directory::exists(config-dir)==false}" message="config-dir ${config-dir} directory doesn't exist"/>
        <!-- Assign, ready and verify bdb properties if needed -->
        <if test="${fs-type=='bdb'}">
            <xmlpeek file="${config}" xpath="/configuration/svn-repos/bdb-log-keep"   property="bdb-log-keep"   unless="${property::exists('bdb-log-keep')}"/>
            <xmlpeek file="${config}" xpath="/configuration/svn-repos/bdb-txn-nosync" property="bdb-txn-nosync" unless="${property::exists('bdb-txn-nosync')}"/>
            <property name="bdb-log-keep" value="${string::trim(string::to-lower(bdb-log-keep))}"/>
            <property name="bdb-txn-nosync" value="${string::trim(string::to-lower(bdb-txn-nosync))}"/>
            <fail if="${bdb-log-keep!='true' and bdb-log-keep!='false'}" message="bdb-log-keep ${bdb-log-keep} must be 'true' or 'false'"/>
            <fail if="${bdb-txn-nosync!='true' and bdb-txn-nosync!='false'}" message="bdb-txn-nosync ${bdb-txn-nosync} must be 'true' or 'false'"/>
        </if>
        <!-- Define Subnant root directory to find /conf and /hooks -->
        <property name="subnant-root" value="${directory::get-parent-directory(directory::get-parent-directory(directory::get-parent-directory(project::get-buildfile-path())))}"/>
        <!-- Define file extension based upon operating sytem -->
        <property name="file-ext" value=".bat" if="${platform::is-win32()}"/>
        <property name="file-ext" value=".sh"  if="${platform::is-unix()}"/>
        <fail unless="${property::exists('file-ext')}" message="Unknown operating sytem (only Linux and Windows supported)"/>
    </target>

    <target name="copy-repos-conf">
        <property name="svnserve-conf" value="${path::combine(subnant-root,'conf/svnserve.conf')}"/>
        <if test="${file::exists(svnserve-conf)}">
            <copy file="${svnserve-conf}" overwrite="true"
                todir="${path::combine(svn-root,repo+'/conf')}"/>
        </if>
    </target>

    <target name="copy-repos-hooks">
        <property name="pre-commit-hook"  value="${path::combine(subnant-root,'hooks/pre-commit'+file-ext)}"/>
        <property name="post-commit-hook" value="${path::combine(subnant-root,'hooks/post-commit'+file-ext)}"/>
        <copy file="${pre-commit-hook}" if="${file::exists(pre-commit-hook)}"
            todir="${path::combine(svn-root,repo+'/hooks')}"/>
        <copy file="${post-commit-hook}" if="${file::exists(post-commit-hook)}"
            todir="${path::combine(svn-root,repo+'/hooks')}"/>
    </target>

    <target name="help">
        <write>
            <![CDATA[Create repositories using svnadmin

If no options are passed, use values in subnant.config
and copy (if found) subnant/conf/svnserve.conf and any
subnant/hooks/* appropriate for your operating system.

Required:   
repos           comma separated list of repositories
   
Options:
svn-root        repository root directory (must already exist)
svn-bindir      Subversion binary directory (must already exist)
fs-type         type of repository to create: bdb or 'fsfs
config-dir      read user configuration files from this directory
bdb-log-keep    [Berkeley DB] automatic log file removal : true or false
bdb-txn-nosync  [Berkeley DB] fsync at transaction commit: true or false
no-svnserve     set true to not copy subnant/conf/svnserve.conf
no-hooks        set true to not copy subnant/hooks/

Examples:
subnant create -D:repos=repo1,repo2
subnant create -D:repos=repo1 -D:svn-root=/svnroot/repos
subnant create verify -D:repos=repo1 -D:fs-type=fsfs -D:no-hooks=true
            ]]>
        </write>
    </target>
   
</project>
