<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="subnant" default="help" basedir=".">

    <description>Subversion administration using NAnt</description>

    <!-- Default target -->
    <target name="help">
        <if test="${subnant::get-targets-count()==1}">
            <write>
                <![CDATA[Subversion administration using NAnt
Copyright (C) 2005 Simon McKenna   
http://subnant.berlios.de

Usage: subnant <target> -D:<option>

Examples:
subnant -projecthelp
subnant config
subnant help test
subnant test
subnant verify dump -D:repos=repo1,repo2
                ]]>
            </write>
        </if>   
    </target>

    <!-- Repository targets -->
    <target name="create" description="Create repositories"
        depends="init,init-repos,init-svnadmin">
        <nant buildfile="targets/create.build" target="${subnant::get-target()}"/>
    </target>

    <target name="dump" description="Dump repositories"
        depends="init,init-repos,init-svnadmin,verify-repos-exists,build-repos-list">
        <nant buildfile="targets/dump.build" target="${subnant::get-target()}"/>
    </target>

    <target name="verify" description="Verify repositories"
        depends="init,init-repos,init-svnadmin,verify-repos-exists,build-repos-list">
        <nant buildfile="targets/verify.build" target="${subnant::get-target()}"/>
    </target>

    <target name="load" description="Load repositories"
        depends="init,init-repos,init-svnadmin">
        <nant buildfile="targets/load.build" target="${subnant::get-target()}"/>
    </target>

    <target name="copy" description="Copy repositories"
        depends="init,init-repos,init-svnadmin,verify-repos-exists,build-repos-list">
        <nant buildfile="targets/verify.build" target="${subnant::get-target()}"/>
    </target>

    <!-- Repository hooks targets -->
    <target name="commit-access" description="Control access to repository using pre-commit hook"
        depends="init,init-repos">
        <nant buildfile="targets/commit-access.build" target="${subnant::get-target()}"/>
    </target>

    <target name="commit-email" description="Generate email from commits using post-commit hook"
        depends="init,init-repos">
        <nant buildfile="targets/commit-email.build" target="${subnant::get-target()}"/>
    </target>

    <!-- Working copy targets -->
    <target name="bugtraq" description="Set bugtraq props in working copy"
        depends="init,init-wc,init-svn,verify-wc-exists">
        <nant buildfile="targets/bugtraq.build" target="${subnant::get-target()}"/>
    </target>

    <!-- Other targets -->
    <target name="install" description="Create subnant wrapper script"
        depends="init">
        <nant buildfile="targets/install.build" target="${subnant::get-target()}"/>
    </target>

    <target name="config" description="Show configuration"
        depends="init,init-repos">
        <nant buildfile="targets/config.build" target="${subnant::get-target()}"/>
    </target>

    <target name="test" description="Test main targets"
        depends="init,init-repos,init-wc,init-svn,init-svnadmin,init-svnlook">
        <nant buildfile="targets/test.build" target="${subnant::get-target()}"/>
    </target>

    <!-- Sub targets -->
    <target name="init">
        <property name="subnant-srcdir" value="${path::get-directory-name(project::get-buildfile-path())}"/>
        <property name="nant.onsuccess" value="success"/>
        <property name="nant.onfailure" value="failure"/>
        <tstamp property="startstamp" pattern="HHmmss"/>
        <property name="log-file"    value="${path::combine(path::get-temp-path(),'subnant-log-'+startstamp)}"/>
        <property name="output-file" value="${path::combine(path::get-temp-path(),'subnant-output-'+startstamp)}"/>
        <property name="starttime"   value="${datetime::now()}"/>
        <echo file="${log-file}" append="false" message="Subnant started ${datetime::to-string(starttime)}"/>
        <!-- Assign default config file unless config already defined from command-line option -->
        <property name="config" value="${path::combine(project::get-buildfile-path(),'../../conf/subnant.config')}"
            unless="${property::exists('config')}"/>
        <fail unless="${file::exists(config)}" message="Could not find ${path::get-file-name(config)}"/>
        <!-- Assign default Subversion directory unless already defined from command-line option -->
        <xmlpeek file="${config}" xpath="/configuration/svn-bindir" property="svn-bindir" unless="${property::exists('svn-bindir')}"/>
        <!-- Verify Subversion directory is valid if set -->
        <if test="${string::get-length(svn-bindir)!=0 and directory::exists(svn-bindir)!=true}">
            <echo file="${log-file}" message="Subversion binary directory doesn't exist: ${svn-bindir}" append="true"/>
            <fail message="Subversion binary directory doesn't exist: ${svn-bindir}"/>
        </if>
    </target>

    <target name="init-repos">
        <!-- Assign svn-root unless already defined from command-line property -->
        <xmlpeek file="${config}" xpath="/configuration/svn-repos/svn-root" property="svn-root" unless="${property::exists('svn-root')}"/>
        <ifnot test="${directory::exists(svn-root)}">
            <echo file="${log-file}" message="Repository root directory doesn't exist: ${svn-root}" append="true"/>
            <fail message="Repository root directory doesn't exist: ${svn-root}"/>
        </ifnot>
    </target>

    <target name="init-wc">
        <!-- Assign wc unless already defined from command-line option -->
        <property name="wc" value="${directory::get-current-directory()}" unless="${property::exists('wc')}"/>
    </target>

    <target name="init-svn">
        <property name="svn" value="${path::combine(svn-bindir,'svn')}"/>
    </target>

    <target name="init-svnadmin">
        <property name="svnadmin" value="${path::combine(svn-bindir,'svnadmin')}"/>
    </target>

    <target name="init-svnlook">
        <property name="svnlook" value="${path::combine(svn-bindir,'svnlook')}"/>
    </target>

    <target name="verify-repos-exists">
        <!-- Verify repositories exist if command-line parameter given -->
        <if test="${property::exists('repos')}">
            <if test="${string::get-length(repos)==0}">
                <echo file="${log-file}" message="Property 'repos' was defined but no value set" append="true"/>
                <fail message="Property 'repos' was defined but no value set"/>
            </if>
            <foreach item="String" in="${repos}" delim="," property="repo">
                <ifnot test="${directory::exists(path::combine(svn-root,repo)) and file::exists(path::combine(svn-root,path::combine(repo,'db/fs-type')))}">
                    <echo file="${log-file}" message="Can't find repository '${repo}' under ${svn-root}" append="true"/>
                    <fail message="Can't find repository '${repo}' under ${svn-root}"/>
                </ifnot>
                <loadfile file="${path::combine(svn-root,path::combine(repo,'db/fs-type'))}" property="fs-type-test"/>
                <ifnot test="${string::contains(fs-type-test,'bdb') or string::contains(fs-type-test,'fsfs')}">
                    <echo file="${log-file}" message="'${repo}' is not a bdb or fsfs type of repository" append="true"/>
                    <fail message="'${repo}' is not a bdb or fsfs type of repository"/>
                </ifnot>
            </foreach>
        </if>
    </target>

    <target name="verify-wc-exists">
        <!-- Verify current directory or wc option is a working copy -->
        <fail if="${string::get-length(wc)==0}" message="Option wc was defined but no value set"/>
        <foreach item="String" in="${wc}" delim="," property="path">
            <ifnot test="${file::exists(path::combine(path,'.svn/format')) or file::exists(path::combine(path,'_svn/format'))}">
                <fail message="Could not find working copy in ${path}"/>
            </ifnot>
        </foreach>
    </target>

    <target name="build-repos-list">
        <!-- Build list of all repositories under svn-root if command-line option not set -->
        <ifnot test="${property::exists('repos')}">
            <property name="repos" value=""/>
            <foreach item="Folder" in="${svn-root}" property="repo">
                <do>
                    <property name="fs-type-test" value=""/>
                    <loadfile file="${path::combine(repo,'db/fs-type')}" property="fs-type-test" failonerror="false"/>
                    <if test="${string::contains(fs-type-test,'bdb') or string::contains(fs-type-test,'fsfs')}">
                        <property name="repos" value="${repos+repo+','}"/>
                    </if>
                </do>
            </foreach>
            <!-- Trim trailing comma -->
            <if test="${string::get-length(repos)>0}">
                <property name="repos" value="${string::substring(repos,0,string::get-length(repos)-1)}"/>
            </if>
            <ifnot test="${string::get-length(repos)>0}">
                <echo file="${log-file}" message="No repositories found under ${svn-root}" append="true"/>
                <fail message="No repositories found under ${svn-root}"/>
            </ifnot>
        </ifnot>
    </target>

    <target name="success">
        <!-- Send success mail message if true in subnant.config/configuration/mail/target/<target> -->
        <property name="searchon" value="true"/>
        <call target="mail-target" unless="${target::has-executed('help')}"/>
        <if test="${property::exists('sendmail') and sendmail=='true'}">
            <property name="subject" value="Success"/>
            <call target="mail"/>
        </if>
    </target>

    <target name="failure">
        <!-- Send failure mail message if 'true|onfail' in subnant.config/configuration/mail/target/<target> -->
        <property name="searchon" value="true|onfail"/>
        <call target="mail-target" unless="${target::has-executed('help')}"/>
        <if test="${property::exists('sendmail') and sendmail=='true'}">
            <property name="subject"       value="FAILURE"/>
            <property name="attach-output" value="true"/>
            <call target="mail"/>
        </if>
    </target>

    <target name="mail-target">
        <property name="sendmail" value="false"/>
        <fail unless="${property::exists('config')}" message="Email not sent as config file not yet set"/>
        <!-- Read mail target settings -->
        <xmlpeek file="${config}" xpath="/configuration/mail/target/commit-access" property="mail_commit-access"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/target/commit-email"  property="mail_commit-email"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/target/dump"          property="mail_dump"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/target/verify"        property="mail_verify"/>
        <!-- Ready mail target settings -->
        <property name="mail_commit-access" value="${string::trim(string::to-lower(mail_commit-access))}"/>
        <property name="mail_commit-email"  value="${string::trim(string::to-lower(mail_commit-email))}"/>
        <property name="mail_dump"          value="${string::trim(string::to-lower(mail_dump))}"/>
        <property name="mail_verify"        value="${string::trim(string::to-lower(mail_verify))}"/>
        <!-- Test for executed targets -->
        <property name="sendmail" value="true" if="${target::has-executed('commit-access') and string::contains(searchon,mail_commit-access)}"/>
        <property name="sendmail" value="true" if="${target::has-executed('commit-email')  and string::contains(searchon,mail_commit-email)}"/>
        <property name="sendmail" value="true" if="${target::has-executed('dump')          and string::contains(searchon,mail_dump)}"/>
        <property name="sendmail" value="true" if="${target::has-executed('verify')        and string::contains(searchon,mail_verify)}"/>
    </target>

    <target name="mail">
        <!-- Mail message is culmination of results from all targets executed -->
        <property name="stoptime" value="${datetime::now()}"/>
        <echo file="${log-file}" append="true" message="Subnant finished ${datetime::to-string(stoptime)} [${timespan::to-string(datetime::parse(stoptime)-datetime::parse(starttime))}]"/>
        <echo file="${log-file}" append="true" message="Output:" if="${property::exists('attach-output') and file::exists(output-file)}"/>
        <loadfile file="${log-file}" property="message"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/from"      property="mail_from"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/host"      property="mail_host"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/tolist"    property="mail_tolist"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/prefix"    property="mail_prefix"/>
        <write>Sending mail to ${mail_tolist}</write>
        <mail mailhost="${mail_host}" from="${mail_from}" tolist="${mail_tolist}"
          subject="${mail_prefix} ${subject}" message="${message}">
            <files>
                <include name="${output-file}" if="${property::exists('attach-output') and file::exists(output-file)}"/>
            </files>
        </mail>
    </target>

    <!-- Custom tasks -->
    <script language="C#">
        <imports>
            <import namespace="System.Xml"/>
        </imports>
        <!-- Subnant writes to Console instead of build log -->
        <code>
            <![CDATA[
            [TaskName("write")]
            public class write : Task
            {
                private string _contents;
                public string Contents
                {
                    get { return _contents; }
                    set { _contents = value; }
                }
                protected override void InitializeTask( XmlNode taskNode )
                {
                    Contents = Project.ExpandProperties( taskNode.InnerText, Location );
                }
                protected override void ExecuteTask()
                {
                    Console.Out.WriteLine( Contents );
                }
            }
            ]]>
        </code>
    </script>   

    <!-- Some Subversion tasks require a URI encoded path -->
    <script language="C#" prefix="path">
        <code>
            <![CDATA[
            [Function("to-uri")]
            public string pathToUriToString( String Path )
            {
                Uri pathToUri = new Uri( Path );
                return pathToUri.ToString();
            }
            ]]>
        </code>
    </script>

    <!-- Function used to determine whether to call help or default target -->
    <script language="C#" prefix="subnant">
        <code>
            <![CDATA[
            [Function("get-target")]
            public  string getSubnantTarget()
            {
                if (Project.BuildTargets.Contains("help"))
                {
                    return "help";
                }
                else
                {
                    return Project.CurrentTarget.Name;
                }
            }
            ]]>
        </code>
    </script>

    <!-- Simple function to return count of build targets, as help should display subnant
         usage (if their is only one build target) rather than the main targets help -->
    <script language="C#" prefix="subnant">
        <code>
            <![CDATA[
            [Function("get-targets-count")]
            public int getSubnantTargetsCount()
            {
                return Project.BuildTargets.Count;
            }
            ]]>
        </code>
    </script>
  
</project>
   