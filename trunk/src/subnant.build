<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="subnant" default="help" basedir=".">

    <description>Subversion administration using NAnt</description>

    <!-- Main targets -->

    <!-- Default target -->
    <target name="help">
        <if test="${subnant::get-targets-count()==1}">
            <echo level="Warning">
                <![CDATA[Subversion administration using NAnt
Copyright (C) 2005 Simon McKenna
http://subnant.berlios.de

Usage: subnant <target> [<target>] [-D:<option>=<value>]

Examples:
subnant -projecthelp
subnant config
subnant help test
subnant test
subnant backup -D:sendmail=true
subnant create verify dump -D:repos=repo1,repo2
subnant migrate -D:to-svn-root=/svn2root/repos -D:to-svn-bindir=/svn2/bin]]>
            </echo>
        </if>
    </target>

    <!-- Repository (server) targets -->
    <target name="backup" description="Backup repositories"
        depends="init,init-repos,init-svnadmin,init-svnlook,verify-repos-exists,build-repos-list">
        <nant buildfile="targets/server/backup.build" target="${subnant::get-target()}"/>
    </target>

    <target name="create" description="Create repositories"
        depends="init,init-repos,init-svnadmin">
        <nant buildfile="targets/server/create.build" target="${subnant::get-target()}"/>
    </target>

    <target name="dump" description="Dump repositories"
        depends="init,init-repos,init-svnadmin,verify-repos-exists,build-repos-list">
        <nant buildfile="targets/server/dump.build" target="${subnant::get-target()}"/>
    </target>

    <target name="load" description="Load repositories"
        depends="init,init-repos,init-svnadmin">
        <nant buildfile="targets/server/load.build" target="${subnant::get-target()}"/>
    </target>

    <target name="migrate" description="Migrate repositories"
        depends="init,init-repos,init-svnadmin,verify-repos-exists,build-repos-list">
        <nant buildfile="targets/server/migrate.build" target="${subnant::get-target()}"/>
    </target>

    <target name="verify" description="Verify repositories"
        depends="init,init-repos,init-svnadmin,verify-repos-exists,build-repos-list">
        <nant buildfile="targets/server/verify.build" target="${subnant::get-target()}"/>
    </target>

    <!-- Repository hooks targets -->
    <target name="commit-access" description="Control access to repository using pre-commit hook"
        depends="init,init-repos,init-svnlook,verify-repos-exists">
        <nant buildfile="targets/server/hooks/commit-access.build" target="${subnant::get-target()}"/>
    </target>

    <target name="commit-allower" description="Control access to repository using start-commit hook"
        depends="init,init-repos,init-svnlook,verify-repos-exists">
        <nant buildfile="targets/server/hooks/commit-allower.build" target="${subnant::get-target()}"/>
    </target>

    <target name="commit-email" description="Generate email about commits using post-commit hook"
        depends="init,init-repos,init-svnlook,verify-repos-exists">
        <nant buildfile="targets/server/hooks/commit-email.build" target="${subnant::get-target()}"/>
    </target>

    <target name="propchange-access" description="Control property access using pre-revprop-change hook"
        depends="init,init-repos,init-svnlook,verify-repos-exists">
        <nant buildfile="targets/server/hooks/propchange-access.build" target="${subnant::get-target()}"/>
    </target>

    <target name="propchange-email" description="Email property changes using post-revprop-change hook"
        depends="init,init-repos,init-svnlook,verify-repos-exists">
        <nant buildfile="targets/server/hooks/propchange-email.build" target="${subnant::get-target()}"/>
    </target>

    <!-- Working copy (client) targets -->
    <target name="bugtraq" description="Set bugtraq props in working copy"
        depends="init,init-wc,init-svn,verify-wc-exists">
        <nant buildfile="targets/client/bugtraq.build" target="${subnant::get-target()}"/>
    </target>

    <!-- Other targets -->
    <target name="config" description="Show subnant configuration"
        depends="init,init-repos">
        <nant buildfile="targets/config.build" target="${subnant::get-target()}"/>
    </target>

    <target name="install" description="Create subnant wrapper script"
        depends="init">
        <nant buildfile="targets/install.build" target="${subnant::get-target()}"/>
    </target>

    <target name="test" description="Test main targets"
        depends="init,init-repos,init-wc,init-svn,init-svnadmin,init-svnlook">
        <nant buildfile="targets/test.build" target="${subnant::get-target()}"/>
    </target>

    <!-- Sub targets -->
    <target name="init">
        <tstamp property="tstamp" pattern="yyyyMMdd-HHmmss-ffff"/>
        <property name="subnant-started" value="${datetime::get-ticks(datetime::now())}"/>
        <property name="nant.onsuccess"  value="success"/>
        <property name="nant.onfailure"  value="failure"/>
        <!-- By default Subnant will fail on any <exec> task errors, which is what most normal operations would want.
             However, for the backup target, one repository failing to <exec> should not stop other repositories from
             being backed up.  So we make the failonerror property switchable and use a variable to store the result -->    
        <property name="failonerror"    value="true"/>
        <property name="subnant-root"   value="${directory::get-parent-directory(directory::get-parent-directory(project::get-buildfile-path()))}"
            unless="${property::exists('subnant-root')}"/>
        <!-- Assign default config file unless already set from command-line -->
        <property name="config" value="${path::combine(subnant-root,'conf/subnant.config')}"
            unless="${property::exists('config')}"/>
        <fail unless="${file::exists(config)}" message="File not found: ${path::get-file-name(config)}"/>
        <!-- Assign default Subversion directory unless already set from command-line -->
        <xmlpeek file="${config}" xpath="/configuration/svn-bindir" property="svn-bindir" unless="${property::exists('svn-bindir')}"/>
        <!-- Verify Subversion directory is valid if set -->
        <fail if="${string::get-length(svn-bindir)&gt;0 and directory::exists(svn-bindir)!=true}"
            message="Subversion binary directory doesn't exist: ${svn-bindir}"/>
        <!-- Load NAntContrib to create and control log file -->
        <xmlpeek file="${config}" xpath="/configuration/nantcontrib-bindir" property="nantcontrib-bindir"
            unless="${property::exists('nantcontrib-bindir')}"/>
        <loadtasks assembly="${nantcontrib-bindir}/NAnt.Contrib.Tasks.dll"/>
        <!-- Define location and file used for standard NAnt build log -->
        <xmlpeek file="${config}" xpath="/configuration/logs/logdir" property="logdir" unless="${property::exists('logdir')}"/>
        <property name="logdir" value="${path::combine(subnant-root,'logs')}" unless="${property::exists('logdir') and string::get-length(string::trim(logdir))&gt;0}"/>
        <mkdir dir="${logdir}" unless="${directory::exists(logdir)}"/>
        <property name="nant-output" value="${path::combine(logdir,'subnant-'+tstamp+'.log')}"/>
        <record name="${nant-output}" level="Info" action="Start"/>
        <!-- Define file used for Subnant output (used in emails) -->
        <property name="subnant-output" value="${path::combine(path::get-temp-path(),'subnant-output-'+tstamp)}"/>
        <!-- Define file used for <exec> task output (used for diff, etc) -->
        <property name="exec-output" value="${path::combine(path::get-temp-path(),'exec-output'+tstamp)}"/>
        <!-- Define file used to store <exec> task result across targets -->
        <property name="exec-result" value="${path::combine(path::get-temp-path(),'exec-result'+tstamp)}"/>
        <echo file="${subnant-output}" append="false">Subnant started ${datetime::to-string(datetime::now())}
</echo>
        <!-- If we're not displaying help cycle logs by maximum file age defined in config -->
        <if test="${subnant::get-target()!='help'}">
            <xmlpeek file="${config}" xpath="/configuration/logs/max-age" property="logs-max-age"/>
            <xmlpeek file="${config}" xpath="/configuration/logs/archive" property="archive"/>
            <property name="archive" value="${string::trim(string::to-lower(archive))}"/>
            <property name="archive" value="${string::trim(string::to-lower(archive))}"/>
            <foreach item="File" property="log-file" if="${logs-max-age!='false' and logs-max-age&gt;='0'}">
                <in>
                    <items>
                        <include name="${path::combine(logdir,'*.log')}"/>
                        <exclude name="${nant-output}"/>
                    </items>
                </in>
                <do>
                    <if test="${file::get-last-write-time(log-file)&lt;(datetime::now()-timespan::from-days(logs-max-age))}">
                        <zip if="${archive=='true'}" zipfile="${path::combine(logdir,'archive.zip')}" failonerror="false" ziplevel="9" comment="Subnant logs">
                            <fileset>
                                <!--<include name="${archived-logs}"/> ::TODO:: Append zip? Or unzip to temp and re-add? -->
                                <include name="${log-file}"/>
                                <exclude name="${nant-output}"/>
                            </fileset>
                        </zip>
                        <delete file="${log-file}"/>
                    </if>
                </do>
            </foreach>
        </if>
    </target>

    <target name="init-repos">
        <!-- Assign svn-root unless already set from command-line -->
        <xmlpeek file="${config}" xpath="/configuration/svn-repos/svn-root" property="svn-root" unless="${property::exists('svn-root')}"/>
        <fail unless="${directory::exists(svn-root)}" message="Repository root directory doesn't exist: ${svn-root}"/>
    </target>

    <target name="init-wc">
        <!-- Assign wc to current directory unless already set from command-line -->
        <property name="wc" value="${directory::get-current-directory()}" unless="${property::exists('wc')}"/>
    </target>

    <target name="init-svn">
        <property name="svn" value="${path::combine(svn-bindir,'svn')}"/>
    </target>

    <target name="init-svnadmin">
        <property name="svnadmin" value="${path::combine(svn-bindir,'svnadmin')}"/>
    </target>

    <target name="init-svnlook">
        <property name="svnlook" value="${path::combine(svn-bindir,'svnlook')}"/>
    </target>

    <target name="verify-repos-exists" if="${subnant::get-target()!='help'}">
        <!-- Verify repositories exist if repos set from command-line -->
        <if test="${property::exists('repos')}">
            <if test="${string::get-length(repos)==0}">
                <fail message="repos was set but no value entered"/>
            </if>
            <foreach item="String" in="${repos}" delim="," property="repo">
                <fail unless="${directory::exists(path::combine(svn-root,repo)) and file::exists(path::combine(svn-root,path::combine(repo,'format')))}"
                    message="Can't find repository ${repo} under ${svn-root}"/>
            </foreach>
        </if>
    </target>

    <target name="verify-wc-exists" if="${subnant::get-target()!='help'}">
        <!-- Verify current directory or wc option is a working copy -->
        <fail if="${string::get-length(wc)==0}" message="Option wc was defined but no value set"/>
        <foreach item="String" in="${wc}" delim="," property="path">
            <ifnot test="${file::exists(path::combine(path,'.svn/format')) or file::exists(path::combine(path,'_svn/format'))}">
                <fail message="${path} is not a working copy"/>
            </ifnot>
        </foreach>
    </target>

    <target name="build-repos-list" if="${subnant::get-target()!='help'}">
        <!-- Build list of all repositories under svn-root if command-line option not set -->
        <ifnot test="${property::exists('repos')}">
            <property name="repos" value=""/>
            <foreach item="Folder" in="${svn-root}" property="repo">
                <do>
                    <loadfile file="${path::combine(repo,'format')}" property="fs-format" failonerror="false"/>
                    <if test="${int::parse(fs-format)&gt;0}">
                        <property name="repos" value="${repos+subnant::return-directory-name(repo)+','}"/>
                    </if>
                </do>
            </foreach>
            <!-- Trim trailing comma -->
            <if test="${string::get-length(repos)&gt;0}">
                <property name="repos" value="${string::substring(repos,0,string::get-length(repos)-1)}"/>
            </if>
            <if test="${string::get-length(repos)==0}">
                <fail message="No repositories found under ${svn-root}"/>
            </if>
        </ifnot>
    </target>

    <!-- Final targets -->
    <target name="success">
        <property name="subject" value="Success on ${subnant::get-build-targets()}"/>
        <if test="${property::exists('nant-output') and file::exists(nant-output)}">
            <record name="${nant-output}" action="Close" />
        </if>
        <call target="finally"/>
    </target>

    <target name="failure">
        <property name="subject" value="*** ERROR during ${subnant::get-build-targets()} ***"/>
        <if test="${property::exists('subnant-output') and file::exists(subnant-output)}">
            <property name="attach-output" value="true"/>
            <echo file="${subnant-output}" append="true" message="*** ERROR occurred - log attached ***"/>
        </if>
        <if test="${property::exists('nant-output') and file::exists(nant-output)}">
            <record name="${nant-output}" action="Close" />
        </if>
        <call target="finally"/>
    </target>

    <target name="finally">
        <call target="mail" if="${property::exists('sendmail') and string::trim(string::to-lower(sendmail))=='true'}"/>
        <call target="delete-temp-files"/>
    </target>

    <target name="mail">
        <fail unless="${property::exists('config')}" message="Email not sent as config file not yet set"/>
        <!-- Mail message is culmination of results from all targets executed -->
        <if test="${property::exists('subnant-output') and file::exists(subnant-output)}">
            <echo file="${subnant-output}" append="true">
${string::pad-right('Subnant finished '+datetime::to-string(datetime::now()),60,' ')}(${subnant::get-elapsed-time(subnant-started)} seconds)</echo>
            <loadfile file="${subnant-output}" property="message"/>
        </if>
        <ifnot test="${property::exists('subnant-output') and file::exists(subnant-output)}">
            <property name="message" value="No output generated by Subnant log?"/>
        </ifnot>
        <xmlpeek file="${config}" xpath="/configuration/mail/from"   property="mail_from"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/host"   property="mail_host"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/tolist" property="mail_tolist"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/prefix" property="mail_prefix"/>
        <echo level="Warning">Sending mail to ${mail_tolist}</echo>
        <mail mailhost="${mail_host}" from="${mail_from}" tolist="${mail_tolist}"
          subject="${mail_prefix} ${subject}" message="${message}">
            <attachments>
                <include name="${nant-output}" if="${property::exists('attach-output') and file::exists(nant-output)}"/>
            </attachments>
        </mail>
    </target>

    <target name="delete-temp-files">
        <if test="${property::exists('subnant-output') and file::exists(subnant-output)}">
            <delete file="${subnant-output}"/>
        </if>
        <if test="${property::exists('exec-output') and file::exists(exec-output)}">
            <delete file="${exec-output}"/>
        </if>
        <if test="${property::exists('exec-result') and file::exists(exec-result)}">
            <delete file="${exec-result}"/>
        </if>
    </target>
   
    <!-- Custom tasks used in Subnant.build or more than target build -->
    <script language="C#" prefix="subnant">
        <imports>
            <import namespace="System.Diagnostics"/>   
        </imports>   
        <code>
            <![CDATA[
            /// <summary>
            /// Determines whether to call help or default subnant target
            /// </summary>
            [Function("get-target")]
            public string getSubnantTarget()
            {
                if (Project.BuildTargets.Contains("help"))
                    return "help";
                else
                    return Project.CurrentTarget.Name;
            }

            /// <summary>
            /// Return count of build targets, as help should display subnant usage
            /// if there is only one build target, rather than main targets help
            /// </summary>
            [Function("get-targets-count")]
            public int getSubnantTargetsCount()
            {
                return Project.BuildTargets.Count;
            }

            /// <summary>
            /// Display list of build targets   
            /// </summary>
            [Function("get-build-targets")]
            public string getSubnantBuildTargets()
            {
                String targets = String.Empty;
                System.Collections.Specialized.StringEnumerator targetEnumerator = Project.BuildTargets.GetEnumerator();

                while (targetEnumerator.MoveNext())
                    targets += targetEnumerator.Current+", ";

                if (targets.EndsWith(", "))
                    targets = targets.Substring(0, targets.Length-2);

                return targets;
            }

            /// <summary>
            /// NAnt path::get-directory-name() returns full path, sometimes we just want directory name   
            /// </summary>
            [Function("return-directory-name")]
            public string getSubnantDirectoryName(string path)
            {
                DirectoryInfo directory = new DirectoryInfo(path);
                return directory != null ? directory.Name : string.Empty;
            }

            // Display elapsed time in seconds using ticks for accuracy   
            [Function("get-elapsed-time")]
            public string getSubnantElapsedTime(long ticks)
            {
                TimeSpan elapsed = TimeSpan.FromTicks(DateTime.Now.Ticks - ticks);
                return Math.Round(elapsed.TotalSeconds, 2).ToString();
            }

            /// <summary>
            /// Subversion somtimes wants an Uri instead of path   
            /// </summary>
            [Function("to-uri")]
            public string pathToUriString(string path)
            {
                Uri pathToUri = new Uri(path);
                return pathToUri.ToString();
            }

            /// <summary>
            /// Display length of file in MB instead of bytes
            /// </summary>
            [Function("length-in-mb")]
            public string getLengthInMb(double length)
            {
                return Math.Round(((length/1024)/1024), 4).ToString();
            }

            /// <summary>
            /// Build unique list of line separated directories recursing up
            /// to root node based upon line separated list of directories.
            /// Initial purpose is to convert 'svnlook dirs-changed' output
            /// so that all parent directories are tested once for hook-prop.
            /// </summary>
            [Function("build-dir-list")]
            public string buildDirList(string dirsChanged)
            {
                string[]  dirsList   = dirsChanged.Split(Environment.NewLine.ToCharArray());
                string[]  tempDirs;
                ArrayList dirsPath   = new ArrayList();
                string    dirsResult = String.Empty;
                string    tempPath   = String.Empty;
                string    dirSplit   = "/";
    
                foreach (string dir in dirsList)
                {
                    tempPath = String.Empty;
                    tempDirs = dir.Split(dirSplit.ToCharArray());

                    foreach (string path in tempDirs)
                    {
                        tempPath += path;
                        if (!tempPath.EndsWith(dirSplit))
                        {
                            tempPath += dirSplit;   
                        }   

                        // Add each directory to result if it isn't already in there
                        if (dirsPath.IndexOf(tempPath) < 0)
                        {
                            dirsPath.Add(tempPath);
                        }
                    }
                }

                dirsPath.Sort();
                foreach (string dir in dirsPath)
                {
                    dirsResult += dir + Environment.NewLine;
                }
                return dirsResult.Trim();
            }
            ]]>
        </code>
    </script>
  
</project>
