<?xml version="1.0" ?>
<!--
Copyright (C) 2005 Simon McKenna

Licensed under the GNU General Public License
http://www.gnu.org/copyleft/gpl.html

$Id$ 
-->
<project name="subnant" default="usage" basedir=".">

    <description>Subversion adminstration using NAnt</description>   

    <!-- Repository targets -->
    <target name="create" depends="init,init-repository" description="Create repositories">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/create.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/create.build" target="create"/>
        </ifnot>
    </target>

    <target name="dump" depends="init,init-repository" description="Dump repositories">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/dump.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/dump.build" target="dump"/>
        </ifnot>
    </target>

    <target name="verify" depends="init,init-repository" description="Verify repositories">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/verify.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/verify.build" target="verify"/>
        </ifnot>
    </target>

    <target name="load" depends="init,init-repository" description="Load repositories">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/load.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/load.build" target="verify"/>
        </ifnot>
    </target>

    <target name="copy" depends="init,init-repository" description="Copy repositories">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/verify.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/verify.build" target="verify"/>
        </ifnot>
    </target>

    <!-- Repository hooks targets -->
    <target name="commit-access" depends="init,init-repository" description="Control access to repository using pre-commit hook">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/commit-access.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/commit-access.build" target="commit-access"/>
        </ifnot>
    </target>

    <target name="commit-email" depends="init,init-repository" description="Generate email from commits using post-commit hook">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/commit-email.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/commit-email.build" target="commit-email"/>
        </ifnot>
    </target>

    <!-- Working copy targets -->
    <target name="bugtraq" depends="init,init-workingcopy" description="Set bugtraq props in working copy">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/bugtraq.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/bugtraq.build" target="bugtraq"/>
        </ifnot>
    </target>

    <!-- Other targets -->
    <target name="config" depends="init,init-repository" description="Show configuration">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/config.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/config.build" target="config"/>
        </ifnot>
    </target>

    <target name="test" depends="init,init-workingcopy,init-repository" description="Test main targets">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/test.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/test.build" target="test"/>
        </ifnot>
    </target>

    <target name="install" depends="init" description="Create 'subnant' wrapper script">
        <if test="${target::has-executed('help')}">
            <nant buildfile="targets/install.build" target="help"/>
        </if>
        <ifnot test="${target::has-executed('help')}">
            <nant buildfile="targets/install.build" target="install"/>
        </ifnot>
    </target>

    <!-- Default target -->   
    <target name="usage">
<write><![CDATA[Subversion adminstration using NAnt
Copyright (C) 2005 Simon McKenna   
http://subnant.berlios.de
   
Usage: subnant <target> -D:<option>

Examples:
subnant -projecthelp
subnant config
subnant help test
subnant test
subnant verify dump -D:repos=repo1,repo2]]></write>
    </target>

    <!-- Sub targets -->   
    <target name="help"/>
   
    <target name="init">
        <property name="nant.onsuccess" value="success"/>
        <property name="nant.onfailure" value="failure"/>  
        <tstamp property="startstamp" pattern="HHmmss"/>
        <property name="log-file"    value="${path::combine(path::get-temp-path(),'subnant-log-'+startstamp)}"/>
        <property name="output-file" value="${path::combine(path::get-temp-path(),'subnant-output-'+startstamp)}"/>
        <property name="starttime"   value="${datetime::now()}"/>
        <echo file="${log-file}" append="false" message="Subnant started ${datetime::to-string(starttime)}"/>  
        <!-- Assign default config file unless config already defined from command-line option -->
        <property name="config" value="${path::combine(project::get-buildfile-path(),'../../conf/subnant.config')}"
            unless="${property::exists('config')}"/>
        <fail unless="${file::exists(config)}" message="Could not find ${path::get-file-name(config)}"/>
        <xmlpeek file="${config}" xpath="/configuration/svn-bindir" property="svn-bindir"/>
    </target>

    <target name="init-repository">
        <!-- Assign svn-root unless already defined from command-line property -->
        <xmlpeek file="${config}" xpath="/configuration/svn-repos/svn-root" property="svn-root" unless="${property::exists('svn-root')}"/>
        <fail unless="${directory::exists(svn-root)}" message="Repository root directory doesn't exist: ${svn-root}"/>
    </target>

    <target name="init-workingcopy">
        <!-- Assign wc unless already defined from command-line option -->
        <property name="wc" value="${directory::get-current-directory()}" unless="${property::exists('wc')}"/>
    </target>

    <target name="success">
        <!-- Send success mail message if 'true' in subnant.config/configuration/mail/target/<target> -->
        <property name="searchon" value="true"/>
        <call target="mailtarget" unless="${target::has-executed('help')}"/>
        <if test="${property::exists('sendmail') and sendmail=='true'}">   
            <property name="subject" value="SUCCESS"/>
            <call target="mail"/>   
        </if>
    </target>

    <target name="failure">
        <!-- Send failure mail message if 'true|onfail' in subnant.config/configuration/mail/target/<target> -->
        <property name="searchon" value="true|onfail"/>
        <call target="mailtarget" unless="${target::has-executed('help')}"/>
        <if test="${property::exists('sendmail') and sendmail=='true'}">   
            <property name="subject"       value="FAILURE"/>
            <property name="attach-output" value="true"/>
            <call target="mail"/>   
        </if>
    </target>

    <target name="mailtarget">
        <property name="sendmail" value="false"/>
        <fail unless="${property::exists('config')}" message="Email not sent as config file not yet set"/>
        <!-- Read mail target settings -->
        <xmlpeek file="${config}" xpath="/configuration/mail/target/bugtraq"       property="mail_bugtraq"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/target/commit-access" property="mail_commit-access"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/target/commit-email"  property="mail_commit-email"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/target/create"        property="mail_create"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/target/dump"          property="mail_dump"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/target/verify"        property="mail_verify"/>
        <!-- Ready mail target settings -->
        <property name="mail_bugtraq"       value="${string::trim(string::to-lower(mail_bugtraq))}"/>
        <property name="mail_commit-access" value="${string::trim(string::to-lower(mail_commit-access))}"/>
        <property name="mail_commit-email"  value="${string::trim(string::to-lower(mail_commit-email))}"/>
        <property name="mail_create"        value="${string::trim(string::to-lower(mail_create))}"/>
        <property name="mail_dump"          value="${string::trim(string::to-lower(mail_dump))}"/>
        <property name="mail_verify"        value="${string::trim(string::to-lower(mail_verify))}"/>
        <!-- Test for executed targets -->
        <property name="sendmail" value="true" if="${target::has-executed('bugtraq')       and string::contains(searchon,mail_bugtraq)}"/>
        <property name="sendmail" value="true" if="${target::has-executed('commit-access') and string::contains(searchon,mail_commit-access)}"/>
        <property name="sendmail" value="true" if="${target::has-executed('commit-email')  and string::contains(searchon,mail_commit-email)}"/>
        <property name="sendmail" value="true" if="${target::has-executed('create')        and string::contains(searchon,mail_create)}"/>
        <property name="sendmail" value="true" if="${target::has-executed('dump')          and string::contains(searchon,mail_dump)}"/>
        <property name="sendmail" value="true" if="${target::has-executed('verify')        and string::contains(searchon,mail_verify)}"/>
    </target>

    <target name="mail">
        <!-- Mail message is culmination of results from all targets executed -->
        <property name="stoptime" value="${datetime::now()}"/>
        <echo file="${log-file}" append="true" message="Subnant finished ${datetime::to-string(stoptime)} [${timespan::to-string(datetime::parse(stoptime)-datetime::parse(starttime))}]"/>  
        <echo file="${log-file}" append="true" message="Output:" if="${property::exists('attach-output') and file::exists(output-file)}"/>
        <loadfile file="${log-file}" property="message"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/from"      property="mail_from"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/host"      property="mail_host"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/tolist/to" property="mail_tolist"/>
        <xmlpeek file="${config}" xpath="/configuration/mail/prefix"    property="mail_prefix"/>
        <write>Sending mail to ${mail_tolist}</write>   
        <mail mailhost="${mail_host}" from="${mail_from}" tolist="${mail_tolist}"
          subject="${mail_prefix} ${subject}" message="${message}">
            <files>
                <include name="${output-file}" if="${property::exists('attach-output') and file::exists(output-file)}"/>
            </files>
        </mail>
    </target>

    <!-- Custom tasks -->
    <script language="C#">
        <imports>
            <import namespace="System.Xml"/>
        </imports>
        <code>
            <![CDATA[
            [TaskName("write")]
            public class write : Task
            {
                private string _contents;
                public string Contents
                {
                    get { return _contents; }
                    set { _contents = value; }
                }
                protected override void InitializeTask(XmlNode taskNode)
                {
                    Contents = Project.ExpandProperties(taskNode.InnerText, Location);
                }
                protected override void ExecuteTask()
                {
                    Console.Out.WriteLine(Contents);
                }
            }
            ]]>
        </code>
    </script>   

    <script language="C#" prefix="path">
        <code>
             <![CDATA[
             [Function("to-uri")]
             public string pathToUriToString(String Path)
             {
                 Uri pathToUri = new Uri(Path);
                 return pathToUri.ToString();
             }
             ]]>
         </code>
     </script>
  
</project>